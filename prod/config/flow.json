[
    {
        "id": "07a98254aae31037",
        "type": "tab",
        "label": "Approve Review"
    },
    {
        "id": "832d89a1f35278cc",
        "type": "subflow",
        "name": "RunAutoApproval",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "e2104333a3aa0741"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 840,
                "y": 280,
                "wires": [
                    {
                        "id": "31f063a60c493e8f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "2fe6838fdefb8310",
        "type": "subflow",
        "name": "ReleaseTask",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 100,
                "wires": [
                    {
                        "id": "fb050f82fb4ef074"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1400,
                "y": 120,
                "wires": [
                    {
                        "id": "e5db5bc60fbba55d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "6b8ad90223d790e1",
        "type": "subflow",
        "name": "HandleTask",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 120,
                "wires": [
                    {
                        "id": "41d5435fe6e1e242"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1420,
                "y": 160,
                "wires": [
                    {
                        "id": "a71f69cdc429251c",
                        "port": 0
                    },
                    {
                        "id": "fd9bab9fdc9e2705",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7110576ffdc36126",
        "type": "subflow",
        "name": "CloseHeaderTask",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 100,
                "wires": [
                    {
                        "id": "feeace93581df6c8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1860,
                "y": 200,
                "wires": [
                    {
                        "id": "a495a5be855adb68",
                        "port": 0
                    },
                    {
                        "id": "8723d18b50f10774",
                        "port": "0"
                    },
                    {
                        "id": "a5525bb37363a76f",
                        "port": 0
                    },
                    {
                        "id": "e361eacc83acad64",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "d70a9e0896099318",
        "type": "subflow",
        "name": "CloseParentTask",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 120,
                "wires": [
                    {
                        "id": "f066da87f3c40d55"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1260,
                "y": 300,
                "wires": [
                    {
                        "id": "794ffa6194688959",
                        "port": 0
                    },
                    {
                        "id": "de2e33b0d5cd1e5a",
                        "port": "0"
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "c30450b75f88597b",
        "type": "subflow",
        "name": "HandleGroupTask",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 100,
                "wires": [
                    {
                        "id": "6c8647c42a4b9fd3"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1740,
                "y": 160,
                "wires": [
                    {
                        "id": "451c2aceaebedb37",
                        "port": 0
                    },
                    {
                        "id": "02e1c4162a03516b",
                        "port": 0
                    },
                    {
                        "id": "01926cdd659c8464",
                        "port": 0
                    },
                    {
                        "id": "02e1c4162a03516b",
                        "port": "1"
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "386204d4507e3dd9",
        "type": "subflow",
        "name": "CloseTask",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "ca7c48d0f80e5505"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1380,
                "y": 180,
                "wires": [
                    {
                        "id": "d3b54503674558a0",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "6da56882aa07c67e",
        "type": "subflow",
        "name": "CancelTask",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 60,
                "wires": [
                    {
                        "id": "169f7ada662f67b2"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1500,
                "y": 60,
                "wires": [
                    {
                        "id": "a949af1f632ce29f",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "597a53d06ff810d8",
        "type": "subflow",
        "name": "TaskDetailValidation",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 60,
                "wires": [
                    {
                        "id": "80be288de5ce5d5a"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 600,
                "y": 80,
                "wires": [
                    {
                        "id": "3a1a0a0ce6f2aacb",
                        "port": 1
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "6ac2c89ac21b5d77",
        "type": "subflow",
        "name": "InsertTaskDetailStatus",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 480,
                "wires": [
                    {
                        "id": "942763ff92881f91"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 120,
                "y": 40,
                "wires": [
                    {
                        "id": "1e7a6e3c497b11c8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "7b1a86285ed2955f",
        "type": "subflow",
        "name": "GenerateID",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "bbb8d83b0e60574d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 980,
                "y": 40,
                "wires": [
                    {
                        "id": "2dff49f5fb6d342d",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "358efc91a2a58551",
        "type": "subflow",
        "name": "InsertTaskHeaderStatus",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 140,
                "wires": [
                    {
                        "id": "f2538c1cc094b6c8"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 820,
                "y": 120,
                "wires": [
                    {
                        "id": "c83f1befc013cfaf",
                        "port": 0
                    },
                    {
                        "id": "125ee9ba5f3a3aae",
                        "port": 0
                    },
                    {
                        "id": "9da4fe70d71c930c",
                        "port": 0
                    },
                    {
                        "id": "b1cd3d7f186fa7d5",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "4627e66fbd3c569a",
        "type": "subflow",
        "name": "TaskHeaderValidation",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 100,
                "wires": [
                    {
                        "id": "0f0a8c3d1de1243e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 560,
                "y": 240,
                "wires": [
                    {
                        "id": "18de40347e5a5129",
                        "port": "2"
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "234349e975e02b24",
        "type": "subflow",
        "name": "CreateTask",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 40,
                "wires": [
                    {
                        "id": "ea45f231c5314dfe"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1320,
                "y": 340,
                "wires": [
                    {
                        "id": "9ff19c5eba8dd6a8",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "275009fa4a3f0b95",
        "type": "subflow",
        "name": "GetSenderNotif",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 120,
                "wires": [
                    {
                        "id": "3dc527e877f58308"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 1730,
                "y": 200,
                "wires": [
                    {
                        "id": "dd3109f25e1e8fa4",
                        "port": 0
                    },
                    {
                        "id": "813f678849c185e4",
                        "port": 0
                    },
                    {
                        "id": "66bcc124e3ccba4e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "fab08bae4898c2d1",
        "type": "subflow",
        "name": "SendNotif",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "7c844c7a1373614c"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 700,
                "y": 160,
                "wires": [
                    {
                        "id": "202d691da72d6d85",
                        "port": 0
                    },
                    {
                        "id": "02d44a34be0ad531",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "69c323403e853b7c",
        "type": "subflow",
        "name": "Test Connection",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 140,
                "wires": [
                    {
                        "id": "1380a5f713d1918d"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "37f4d968adc13212",
        "type": "postgreSQLConfig",
        "name": "BSSN DB Connection",
        "host": "documgt.com",
        "hostFieldType": "str",
        "port": "54329",
        "portFieldType": "num",
        "database": "bssn",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "NodeRED",
        "applicationNameType": "str",
        "max": "100",
        "maxFieldType": "num",
        "idle": "0",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "nodered",
        "userFieldType": "str",
        "password": "P@ssw0rd!",
        "passwordFieldType": "str"
    },
    {
        "id": "a0efbb89.5e42d8",
        "type": "redis-config",
        "name": "RedisServer",
        "options": "{\"port\":6379,\"host\":\"156.67.218.188\",\"username\":\"default\",\"password\":\"P@ssw0rd!\",\"db\":0}",
        "cluster": false,
        "optionsType": "json"
    },
    {
        "id": "fc9d711d29453f24",
        "type": "websocket-listener",
        "path": "/admin/comms/ws/notification",
        "wholemsg": "false"
    },
    {
        "id": "e3f107d043b3b7e4",
        "type": "switch",
        "z": "832d89a1f35278cc",
        "name": "CheckTaskHeadStatus",
        "property": "payload.amount",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 240,
        "y": 100,
        "wires": [
            [
                "77c8c5b12bede940"
            ],
            [
                "07f2f83e15f6b19e"
            ]
        ]
    },
    {
        "id": "07f2f83e15f6b19e",
        "type": "change",
        "z": "832d89a1f35278cc",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Sorry, this task is not an auto-approval task\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 440,
        "y": 140,
        "wires": [
            [
                "bbde121821a6dc56"
            ]
        ]
    },
    {
        "id": "bbde121821a6dc56",
        "type": "http response",
        "z": "832d89a1f35278cc",
        "name": "StatusErrorResp",
        "statusCode": "400",
        "headers": {},
        "x": 640,
        "y": 140,
        "wires": []
    },
    {
        "id": "77c8c5b12bede940",
        "type": "subflow:7b1a86285ed2955f",
        "z": "832d89a1f35278cc",
        "name": "",
        "x": 450,
        "y": 60,
        "wires": [
            [
                "28726ecaefe37b89"
            ]
        ]
    },
    {
        "id": "28726ecaefe37b89",
        "type": "postgresql",
        "z": "832d89a1f35278cc",
        "name": "InsertClosedStatus",
        "query": "INSERT INTO public.task_header_status\n(id, task_header_id, status, notes, \ncreated_at, created_by, updated_at, updated_by)\nVALUES('{{ msg.uuid }}', '{{ msg.req.body.task_header_id}}', 'CLOSED', 'APPROVE',\nCURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}', CURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 670,
        "y": 60,
        "wires": [
            [
                "9fbed89612cfacfc"
            ]
        ]
    },
    {
        "id": "9fbed89612cfacfc",
        "type": "postgresql",
        "z": "832d89a1f35278cc",
        "name": "GetDocRevID",
        "query": "SELECT id \nFROM document_revision dr \nWHERE document_content_header_id = (\n    SELECT content_id \n    FROM task_header th \n    WHERE id = '{{ msg.req.body.task_header_id }}')\nORDER BY created_at DESC LIMIT 1",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 900,
        "y": 60,
        "wires": [
            [
                "28489cdeb96ae6ad"
            ]
        ]
    },
    {
        "id": "28489cdeb96ae6ad",
        "type": "change",
        "z": "832d89a1f35278cc",
        "name": "SetBodyRequest",
        "rules": [
            {
                "t": "move",
                "p": "payload.id",
                "pt": "msg",
                "to": "doc_rev_id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t   \"approvalStatus\": \"APPROVED\",\t   \"id\": msg.doc_rev_id,\t   \"note\": \"Approval using NodeRED Workflow Engine\"\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 120,
        "wires": [
            [
                "b2f253b290a7d367"
            ]
        ]
    },
    {
        "id": "b2f253b290a7d367",
        "type": "http request",
        "z": "832d89a1f35278cc",
        "name": "CallDocumentApproval",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://admin.documgt.com/document-revision/approval/system",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 920,
        "y": 180,
        "wires": [
            [
                "f89e4587c7d04c60"
            ]
        ]
    },
    {
        "id": "e2104333a3aa0741",
        "type": "subflow:4627e66fbd3c569a",
        "z": "832d89a1f35278cc",
        "name": "",
        "x": 200,
        "y": 40,
        "wires": [
            [
                "e3f107d043b3b7e4"
            ]
        ]
    },
    {
        "id": "f89e4587c7d04c60",
        "type": "switch",
        "z": "832d89a1f35278cc",
        "name": "CheckStatusCode",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 230,
        "y": 280,
        "wires": [
            [
                "ebd071ca60185aa8"
            ],
            [
                "caf762f7155f46fc"
            ]
        ]
    },
    {
        "id": "31f063a60c493e8f",
        "type": "subflow:275009fa4a3f0b95",
        "z": "832d89a1f35278cc",
        "name": "",
        "x": 680,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "ebd071ca60185aa8",
        "type": "change",
        "z": "832d89a1f35278cc",
        "name": "SetNotifPayload",
        "rules": [
            {
                "t": "set",
                "p": "sender_id",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "recepient_id",
                "pt": "msg",
                "to": "req.body.user_id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "message",
                "pt": "msg",
                "to": "Your document has been approved",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "content_type",
                "pt": "msg",
                "to": "DOC",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "content_id",
                "pt": "msg",
                "to": "doc_rev_id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 260,
        "wires": [
            [
                "31f063a60c493e8f"
            ]
        ]
    },
    {
        "id": "caf762f7155f46fc",
        "type": "change",
        "z": "832d89a1f35278cc",
        "name": "SetNotifPayload",
        "rules": [
            {
                "t": "set",
                "p": "sender_id",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "recepient_id",
                "pt": "msg",
                "to": "req.body.user_id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "message",
                "pt": "msg",
                "to": "payload.message",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "url",
                "pt": "msg",
                "to": "",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "content_type",
                "pt": "msg",
                "to": "DOC",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "content_id",
                "pt": "msg",
                "to": "doc_rev_id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 300,
        "wires": [
            [
                "31f063a60c493e8f"
            ]
        ]
    },
    {
        "id": "fb050f82fb4ef074",
        "type": "postgresql",
        "z": "2fe6838fdefb8310",
        "name": "GetTaskDetailStatus",
        "query": "SELECT t.*, ts.notes, ts.status\nFROM task_detail t\nJOIN (\n  SELECT task_detail_id, notes, status\n  FROM task_detail_status\n  WHERE task_detail_id = '{{ msg.req.body.task_detail_id }}'\n  ORDER BY created_at DESC\n  LIMIT 1\n) ts ON ts.task_detail_id = t.id;",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 200,
        "y": 100,
        "wires": [
            [
                "9f3404d446a4c918",
                "7faddd73559cb53e"
            ]
        ]
    },
    {
        "id": "9f3404d446a4c918",
        "type": "switch",
        "z": "2fe6838fdefb8310",
        "name": "CheckTaskDetails",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 100,
        "wires": [
            [
                "f981067241eeb186"
            ],
            [
                "085b69079fbe23a8"
            ]
        ]
    },
    {
        "id": "f981067241eeb186",
        "type": "change",
        "z": "2fe6838fdefb8310",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task Detail Not Found\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 40,
        "wires": [
            [
                "5b64fb8de6ec21ff"
            ]
        ]
    },
    {
        "id": "5b64fb8de6ec21ff",
        "type": "http response",
        "z": "2fe6838fdefb8310",
        "name": "TaskDetailsNotFoundResp",
        "statusCode": "400",
        "headers": {},
        "x": 860,
        "y": 40,
        "wires": []
    },
    {
        "id": "de616174cfca5548",
        "type": "switch",
        "z": "2fe6838fdefb8310",
        "name": "CheckStatus",
        "property": "taskdetail.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OWNED",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 850,
        "y": 160,
        "wires": [
            [
                "df0c2470cb29f927"
            ],
            [
                "ace3957b346bd76e"
            ]
        ]
    },
    {
        "id": "085b69079fbe23a8",
        "type": "change",
        "z": "2fe6838fdefb8310",
        "name": "SetTaskDetail",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "taskdetail",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 160,
        "wires": [
            [
                "de616174cfca5548"
            ]
        ]
    },
    {
        "id": "ace3957b346bd76e",
        "type": "change",
        "z": "2fe6838fdefb8310",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Unable to release task because last task state was not OWNED\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1020,
        "y": 200,
        "wires": [
            [
                "59f13164c7147ae8"
            ]
        ]
    },
    {
        "id": "59f13164c7147ae8",
        "type": "http response",
        "z": "2fe6838fdefb8310",
        "name": "StatusErrorResp",
        "statusCode": "400",
        "headers": {},
        "x": 1200,
        "y": 200,
        "wires": []
    },
    {
        "id": "7faddd73559cb53e",
        "type": "debug",
        "z": "2fe6838fdefb8310",
        "name": "DebugReleaseTask",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 40,
        "wires": []
    },
    {
        "id": "df0c2470cb29f927",
        "type": "subflow:7b1a86285ed2955f",
        "z": "2fe6838fdefb8310",
        "name": "",
        "x": 1030,
        "y": 120,
        "wires": [
            [
                "e5db5bc60fbba55d"
            ]
        ]
    },
    {
        "id": "e5db5bc60fbba55d",
        "type": "postgresql",
        "z": "2fe6838fdefb8310",
        "name": "InsertAssignedStatus",
        "query": "INSERT INTO public.task_detail_status\n(id, task_detail_id, notes, status,\ncreated_at, created_by, updated_at, updated_by)\nVALUES('{{ msg.uuid }}', '{{ msg.taskdetail.id }}', '{{ msg.req.body.notes }}', 'ASSIGNED',\nCURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}', CURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1240,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "41d5435fe6e1e242",
        "type": "postgresql",
        "z": "6b8ad90223d790e1",
        "name": "GetTaskDetailStatus",
        "query": "SELECT t.*, ts.notes, ts.status, ts.created_by as owned_by\nFROM task_detail t\nJOIN (\n  SELECT task_detail_id, notes, status, created_by\n  FROM task_detail_status\n  WHERE task_detail_id = '{{ msg.req.body.task_detail_id }}'\n  ORDER BY created_at DESC\n  LIMIT 1\n) ts ON ts.task_detail_id = t.id;",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 200,
        "y": 120,
        "wires": [
            [
                "7820fec8af09ab7b",
                "a7ee9429b1f3af19"
            ]
        ]
    },
    {
        "id": "a7ee9429b1f3af19",
        "type": "switch",
        "z": "6b8ad90223d790e1",
        "name": "CheckTaskDetails",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 450,
        "y": 120,
        "wires": [
            [
                "618e0654a31095c5"
            ],
            [
                "7f3b5bb36c059c40"
            ]
        ]
    },
    {
        "id": "618e0654a31095c5",
        "type": "change",
        "z": "6b8ad90223d790e1",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task Detail Not Found\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 660,
        "y": 60,
        "wires": [
            [
                "31ce9f3a9ceeb173"
            ]
        ]
    },
    {
        "id": "31ce9f3a9ceeb173",
        "type": "http response",
        "z": "6b8ad90223d790e1",
        "name": "TaskDetailsNotFoundResp",
        "statusCode": "400",
        "headers": {},
        "x": 880,
        "y": 60,
        "wires": []
    },
    {
        "id": "d15068cf2596d817",
        "type": "switch",
        "z": "6b8ad90223d790e1",
        "name": "CheckStatus",
        "property": "taskdetail.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ASSIGNED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "OWNED",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 870,
        "y": 180,
        "wires": [
            [
                "6764f17b8ab82452"
            ],
            [
                "a71f69cdc429251c"
            ],
            [
                "336415c680ab12dd"
            ]
        ]
    },
    {
        "id": "7f3b5bb36c059c40",
        "type": "change",
        "z": "6b8ad90223d790e1",
        "name": "SetTaskDetail",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "taskdetail",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 180,
        "wires": [
            [
                "d15068cf2596d817"
            ]
        ]
    },
    {
        "id": "336415c680ab12dd",
        "type": "change",
        "z": "6b8ad90223d790e1",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Unable to own task because last task state was not ASSIGNED\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 260,
        "wires": [
            [
                "134eddbd901fcb10"
            ]
        ]
    },
    {
        "id": "134eddbd901fcb10",
        "type": "http response",
        "z": "6b8ad90223d790e1",
        "name": "StatusErrorResp",
        "statusCode": "400",
        "headers": {},
        "x": 1280,
        "y": 260,
        "wires": []
    },
    {
        "id": "7820fec8af09ab7b",
        "type": "debug",
        "z": "6b8ad90223d790e1",
        "name": "DebugHandleTask",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 450,
        "y": 60,
        "wires": []
    },
    {
        "id": "a71f69cdc429251c",
        "type": "switch",
        "z": "6b8ad90223d790e1",
        "name": "CheckSelfOwning",
        "property": "taskdetail.owned_by",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "taskdetail.assignee_id",
                "vt": "msg"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1090,
        "y": 180,
        "wires": [
            [],
            [
                "77b2186dad6f88b7"
            ]
        ]
    },
    {
        "id": "77b2186dad6f88b7",
        "type": "change",
        "z": "6b8ad90223d790e1",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Unable to own task because last task state was not ASSIGNED\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1280,
        "y": 200,
        "wires": [
            [
                "134eddbd901fcb10"
            ]
        ]
    },
    {
        "id": "6764f17b8ab82452",
        "type": "subflow:7b1a86285ed2955f",
        "z": "6b8ad90223d790e1",
        "name": "",
        "x": 1070,
        "y": 120,
        "wires": [
            [
                "fd9bab9fdc9e2705"
            ]
        ]
    },
    {
        "id": "fd9bab9fdc9e2705",
        "type": "postgresql",
        "z": "6b8ad90223d790e1",
        "name": "InsertHandleStatus",
        "query": "INSERT INTO public.task_detail_status\n(id, task_detail_id, notes, status,\ncreated_at, created_by, updated_at, updated_by)\nVALUES('{{ msg.uuid }}', '{{ msg.taskdetail.id }}', '{{ msg.req.body.notes }}', 'OWNED',\nCURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}', CURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1270,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "47fb14bf840fb085",
        "type": "postgresql",
        "z": "7110576ffdc36126",
        "name": "GetAllTaskDetail",
        "query": "SELECT CASE WHEN NOT EXISTS(\n  SELECT 1 FROM task_detail t LEFT JOIN (\n    SELECT DISTINCT ON (task_detail_id) task_detail_id, status \n    FROM task_detail_status ORDER BY task_detail_id, created_at DESC) s\n  ON s.task_detail_id = t.id\n  WHERE t.task_header_id = '{{ msg.req.body.task_header_id }}'\n  AND s.status <> 'CLOSED')\nTHEN 1 ELSE 0 END AS is_all_detail_closed;",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 360,
        "y": 260,
        "wires": [
            [
                "8723d18b50f10774",
                "8aa1946dc4ef68a1"
            ]
        ]
    },
    {
        "id": "8723d18b50f10774",
        "type": "switch",
        "z": "7110576ffdc36126",
        "name": "IsAllDetailTaskClosed?",
        "property": "payload.is_all_detail_closed",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 580,
        "y": 260,
        "wires": [
            [],
            [
                "d2356c91a00381e6"
            ]
        ]
    },
    {
        "id": "bf89321144a45ef5",
        "type": "subflow:358efc91a2a58551",
        "z": "7110576ffdc36126",
        "name": "",
        "x": 630,
        "y": 400,
        "wires": [
            [
                "35dc0a3839e3553a"
            ]
        ]
    },
    {
        "id": "a495a5be855adb68",
        "type": "http request",
        "z": "7110576ffdc36126",
        "name": "CallDocumentApproval",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://admin.documgt.com/document-revision/approval/system",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1600,
        "y": 360,
        "wires": [
            [
                "901ce4a0f7377f61",
                "bac04122268de50e"
            ]
        ]
    },
    {
        "id": "52b310f9a43b7f3b",
        "type": "change",
        "z": "7110576ffdc36126",
        "name": "SetBodyRequest",
        "rules": [
            {
                "t": "move",
                "p": "payload.id",
                "pt": "msg",
                "to": "doc_rev_id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t   \"approvalStatus\": msg.approval_status,\t   \"approvalUserId\": msg.req.body.user_id,\t   \"id\": msg.doc_rev_id,\t   \"note\": msg.req.body.notes != null and $boolean($trim(msg.req.body.notes)) ? msg.approval_status & \" - \" & $trim(msg.req.body.notes) : msg.approval_status\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1350,
        "y": 360,
        "wires": [
            [
                "a495a5be855adb68",
                "34199a99ddcb2987"
            ]
        ]
    },
    {
        "id": "312a6fbf99087f3c",
        "type": "postgresql",
        "z": "7110576ffdc36126",
        "name": "GetDocRevID",
        "query": "SELECT id\nFROM document_revision dr \nWHERE document_content_header_id = (\n    SELECT content_id \n    FROM task_header th \n    WHERE id = '{{ msg.req.body.task_header_id }}')\nORDER BY created_at DESC LIMIT 1",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1120,
        "y": 360,
        "wires": [
            [
                "52b310f9a43b7f3b",
                "6e8ed9c0db8ead1c"
            ]
        ]
    },
    {
        "id": "2ddd08ed231070a6",
        "type": "switch",
        "z": "7110576ffdc36126",
        "name": "CheckAction",
        "property": "req.body.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SIGNING",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "APPROVE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REVISE",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 130,
        "y": 280,
        "wires": [
            [
                "47fb14bf840fb085"
            ],
            [
                "47fb14bf840fb085"
            ],
            [
                "b05cab5738e00bc9"
            ],
            [
                "ac97021ea902a13b"
            ]
        ]
    },
    {
        "id": "0ea361ef501ede69",
        "type": "postgresql",
        "z": "7110576ffdc36126",
        "name": "InsertOnGoingHeaderStatus",
        "query": "INSERT INTO public.task_header_status\n(id, task_header_id, status, notes, \ncreated_at, created_by, updated_at, updated_by)\nVALUES('{{ msg.uuid }}', '{{ msg.req.body.task_header_id}}', 'ONGOING', NULL, \nCURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}', CURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1100,
        "y": 60,
        "wires": [
            [
                "2ddd08ed231070a6",
                "889496a1de760b32"
            ]
        ]
    },
    {
        "id": "7ce3e84332bc4eaf",
        "type": "switch",
        "z": "7110576ffdc36126",
        "name": "CheckStatus",
        "property": "taskheader.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 100,
        "wires": [
            [
                "105358d68b0dad95"
            ],
            [
                "2ddd08ed231070a6"
            ]
        ]
    },
    {
        "id": "feeace93581df6c8",
        "type": "postgresql",
        "z": "7110576ffdc36126",
        "name": "GetLatestHeaderStatus",
        "query": "SELECT t.*, ts.notes, ts.status\nFROM task_header t\nLEFT JOIN (\n  SELECT DISTINCT ON (task_header_id) task_header_id, notes, status\n  FROM task_header_status\n  ORDER BY task_header_id, created_at DESC\n) ts ON ts.task_header_id = t.id\nWHERE t.id = '{{ msg.req.body.task_header_id }}';",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 210,
        "y": 100,
        "wires": [
            [
                "8dec587772113938",
                "154a791f78d74fc7"
            ]
        ]
    },
    {
        "id": "8dec587772113938",
        "type": "link out",
        "z": "7110576ffdc36126",
        "name": "DebugOut",
        "mode": "link",
        "links": [
            "9aeb0d15829761bf"
        ],
        "x": 395,
        "y": 60,
        "wires": []
    },
    {
        "id": "889496a1de760b32",
        "type": "link out",
        "z": "7110576ffdc36126",
        "name": "DebugOut",
        "mode": "link",
        "links": [
            "9aeb0d15829761bf"
        ],
        "x": 1275,
        "y": 40,
        "wires": []
    },
    {
        "id": "8aa1946dc4ef68a1",
        "type": "link out",
        "z": "7110576ffdc36126",
        "name": "DebugOut",
        "mode": "link",
        "links": [
            "9aeb0d15829761bf"
        ],
        "x": 495,
        "y": 300,
        "wires": []
    },
    {
        "id": "6e8ed9c0db8ead1c",
        "type": "link out",
        "z": "7110576ffdc36126",
        "name": "DebugOut",
        "mode": "link",
        "links": [
            "9aeb0d15829761bf"
        ],
        "x": 1275,
        "y": 320,
        "wires": []
    },
    {
        "id": "b05cab5738e00bc9",
        "type": "change",
        "z": "7110576ffdc36126",
        "name": "SetRejected",
        "rules": [
            {
                "t": "set",
                "p": "approval_status",
                "pt": "msg",
                "to": "REJECTED",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "notif_message",
                "pt": "msg",
                "to": "Your task has been completely Closed because the content was Rejected.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 360,
        "wires": [
            [
                "bf89321144a45ef5"
            ]
        ]
    },
    {
        "id": "90d8dbb61e2a8da8",
        "type": "change",
        "z": "7110576ffdc36126",
        "name": "SetApproved",
        "rules": [
            {
                "t": "set",
                "p": "approval_status",
                "pt": "msg",
                "to": "APPROVED",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "notif_message",
                "pt": "msg",
                "to": "Your task has been completely closed because the content was Approved.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 990,
        "y": 300,
        "wires": [
            [
                "bf89321144a45ef5"
            ]
        ]
    },
    {
        "id": "105358d68b0dad95",
        "type": "subflow:7b1a86285ed2955f",
        "z": "7110576ffdc36126",
        "name": "",
        "x": 870,
        "y": 60,
        "wires": [
            [
                "0ea361ef501ede69"
            ]
        ]
    },
    {
        "id": "d6690f5b8ad99fe0",
        "type": "debug",
        "z": "7110576ffdc36126",
        "name": "DebugCloseHeaderTask",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 210,
        "y": 40,
        "wires": []
    },
    {
        "id": "9aeb0d15829761bf",
        "type": "link in",
        "z": "7110576ffdc36126",
        "name": "DebugIn",
        "links": [
            "6e8ed9c0db8ead1c",
            "889496a1de760b32",
            "8aa1946dc4ef68a1",
            "8dec587772113938",
            "34199a99ddcb2987",
            "901ce4a0f7377f61",
            "fcc3c3ace238fa01",
            "1cf0903a466c8693"
        ],
        "x": 45,
        "y": 40,
        "wires": [
            [
                "d6690f5b8ad99fe0"
            ]
        ]
    },
    {
        "id": "34199a99ddcb2987",
        "type": "link out",
        "z": "7110576ffdc36126",
        "name": "DebugOut",
        "mode": "link",
        "links": [
            "9aeb0d15829761bf"
        ],
        "x": 1515,
        "y": 320,
        "wires": []
    },
    {
        "id": "901ce4a0f7377f61",
        "type": "link out",
        "z": "7110576ffdc36126",
        "name": "DebugOut",
        "mode": "link",
        "links": [
            "9aeb0d15829761bf"
        ],
        "x": 1855,
        "y": 440,
        "wires": []
    },
    {
        "id": "ac97021ea902a13b",
        "type": "change",
        "z": "7110576ffdc36126",
        "name": "SetRevision",
        "rules": [
            {
                "t": "set",
                "p": "approval_status",
                "pt": "msg",
                "to": "REVISION",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "notif_message",
                "pt": "msg",
                "to": "Your task has been On Hold because the content needs Revision.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 420,
        "wires": [
            [
                "bf89321144a45ef5"
            ]
        ]
    },
    {
        "id": "e3a1e98089b89ef1",
        "type": "change",
        "z": "7110576ffdc36126",
        "name": "SetPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t    \"sender_id\": msg.req.body.user_id,\t    \"recipient_type\": \"USER\",\t    \"recipient_id\": msg.taskheader.created_by,\t    \"message\": msg.notif_message,\t    \"url\": \"/pending-task\",\t    \"content_type\": \"TASK\",\t    \"content_id\": msg.req.body.task_header_id\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 190,
        "y": 560,
        "wires": [
            [
                "2e6cd8f0e6eaadea",
                "9526b5f43ac34bef",
                "c4c56b102e0302c2"
            ]
        ]
    },
    {
        "id": "9526b5f43ac34bef",
        "type": "http request",
        "z": "7110576ffdc36126",
        "name": "CallSendWSNotif",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://nodered.documgt.com/send-notif-ws",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 390,
        "y": 520,
        "wires": [
            [
                "2e6cd8f0e6eaadea"
            ]
        ]
    },
    {
        "id": "2e6cd8f0e6eaadea",
        "type": "debug",
        "z": "7110576ffdc36126",
        "name": "debugNotifPayload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 560,
        "wires": []
    },
    {
        "id": "bb6f74f93f74988c",
        "type": "link in",
        "z": "7110576ffdc36126",
        "name": "NotifIn",
        "links": [
            "bac04122268de50e",
            "5ba317e4460786e0"
        ],
        "x": 65,
        "y": 560,
        "wires": [
            [
                "e3a1e98089b89ef1"
            ]
        ]
    },
    {
        "id": "bac04122268de50e",
        "type": "link out",
        "z": "7110576ffdc36126",
        "name": "NotifOut",
        "mode": "link",
        "links": [
            "bb6f74f93f74988c"
        ],
        "x": 1855,
        "y": 360,
        "wires": []
    },
    {
        "id": "c4c56b102e0302c2",
        "type": "http request",
        "z": "7110576ffdc36126",
        "name": "CallSendMailNotif",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://nodered.documgt.com/send-notif-email",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 390,
        "y": 600,
        "wires": [
            [
                "2e6cd8f0e6eaadea"
            ]
        ]
    },
    {
        "id": "d2356c91a00381e6",
        "type": "switch",
        "z": "7110576ffdc36126",
        "name": "CheckAction",
        "property": "req.body.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "SIGNING",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "APPROVE",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 280,
        "wires": [
            [
                "a5525bb37363a76f"
            ],
            [
                "90d8dbb61e2a8da8"
            ]
        ]
    },
    {
        "id": "a5525bb37363a76f",
        "type": "subflow:358efc91a2a58551",
        "z": "7110576ffdc36126",
        "name": "",
        "x": 1030,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "e361eacc83acad64",
        "type": "http request",
        "z": "7110576ffdc36126",
        "name": "CallBundleApproval",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://admin.documgt.com/document-bundle-revision/approval",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1590,
        "y": 440,
        "wires": [
            [
                "bac04122268de50e",
                "901ce4a0f7377f61"
            ]
        ]
    },
    {
        "id": "154a791f78d74fc7",
        "type": "change",
        "z": "7110576ffdc36126",
        "name": "SetTaskHeader",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "taskheader",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 460,
        "y": 100,
        "wires": [
            [
                "7ce3e84332bc4eaf"
            ]
        ]
    },
    {
        "id": "35dc0a3839e3553a",
        "type": "switch",
        "z": "7110576ffdc36126",
        "name": "CheckContentType",
        "property": "taskheader.content_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "DOC",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "BUNDLE",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 890,
        "y": 400,
        "wires": [
            [
                "312a6fbf99087f3c"
            ],
            [
                "ececa92ecc2d6728"
            ]
        ]
    },
    {
        "id": "ececa92ecc2d6728",
        "type": "postgresql",
        "z": "7110576ffdc36126",
        "name": "GetBundleRevID",
        "query": "SELECT id\nFROM document_bundle_revision br \nWHERE document_bundle_id = (\n    SELECT content_id \n    FROM task_header th \n    WHERE id = '{{ msg.req.body.task_header_id }}')\nORDER BY created_at DESC LIMIT 1",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1130,
        "y": 440,
        "wires": [
            [
                "ca42a5107104ee4d"
            ]
        ]
    },
    {
        "id": "ca42a5107104ee4d",
        "type": "change",
        "z": "7110576ffdc36126",
        "name": "SetBodyRequest",
        "rules": [
            {
                "t": "move",
                "p": "payload.id",
                "pt": "msg",
                "to": "bundle_rev_id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t   \"approvalStatus\": msg.approval_status,\t   \"approvalUserId\": msg.req.body.user_id,\t   \"id\": msg.bundle_rev_id,\t   \"note\": msg.req.body.notes != null and $boolean($trim(msg.req.body.notes)) ? msg.approval_status & \" - \" & $trim(msg.req.body.notes) : msg.approval_status\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1350,
        "y": 440,
        "wires": [
            [
                "e361eacc83acad64"
            ]
        ]
    },
    {
        "id": "f066da87f3c40d55",
        "type": "postgresql",
        "z": "d70a9e0896099318",
        "name": "GetLatestParentStatus",
        "query": "SELECT t.*, ts.notes, ts.status\nFROM task_detail t\nJOIN (\n  SELECT task_detail_id, notes, status\n  FROM task_detail_status\n  WHERE task_detail_id = '{{ msg.taskdetail.task_parent_id }}'\n  ORDER BY created_at DESC\n  LIMIT 1\n) ts ON ts.task_detail_id = t.id;",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 200,
        "y": 120,
        "wires": [
            [
                "28e0feedaf3852a1",
                "a674936d98842ac1"
            ]
        ]
    },
    {
        "id": "28e0feedaf3852a1",
        "type": "link out",
        "z": "d70a9e0896099318",
        "name": "DebugOut",
        "mode": "link",
        "links": [
            "a5cc43c4e5a2510c"
        ],
        "x": 355,
        "y": 80,
        "wires": []
    },
    {
        "id": "a674936d98842ac1",
        "type": "change",
        "z": "d70a9e0896099318",
        "name": "SetTaskParent",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "taskparent",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 120,
        "wires": [
            [
                "7fd6848296744c06",
                "9a0eba4737c12220"
            ]
        ]
    },
    {
        "id": "7fd6848296744c06",
        "type": "switch",
        "z": "d70a9e0896099318",
        "name": "CheckStatus",
        "property": "taskparent.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 610,
        "y": 120,
        "wires": [
            [
                "76c79c12a64e7f0e"
            ],
            [
                "ec52ebc4b8fadd09"
            ]
        ]
    },
    {
        "id": "76c79c12a64e7f0e",
        "type": "subflow:7b1a86285ed2955f",
        "z": "d70a9e0896099318",
        "name": "",
        "x": 790,
        "y": 100,
        "wires": [
            [
                "b7db29d94c7694d7"
            ]
        ]
    },
    {
        "id": "ec52ebc4b8fadd09",
        "type": "switch",
        "z": "d70a9e0896099318",
        "name": "CheckAction",
        "property": "req.body.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "APPROVE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SIGNING",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REVISE",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 4,
        "x": 590,
        "y": 280,
        "wires": [
            [
                "83b49f24c9b41181"
            ],
            [
                "83b49f24c9b41181"
            ],
            [
                "846418b0b024265d"
            ],
            [
                "846418b0b024265d"
            ]
        ]
    },
    {
        "id": "83b49f24c9b41181",
        "type": "postgresql",
        "z": "d70a9e0896099318",
        "name": "GetAllChildTask",
        "query": "SELECT CASE WHEN NOT EXISTS(\n  SELECT 1 FROM task_detail t LEFT JOIN (\n    SELECT DISTINCT ON (task_detail_id) task_detail_id, status \n    FROM task_detail_status ORDER BY task_detail_id, created_at DESC) s\n  ON s.task_detail_id = t.id\n  WHERE t.task_parent_id = '{{ msg.taskparent.id }}'\n  AND s.status <> 'CLOSED')\nTHEN 1 ELSE 0 END AS is_all_child_closed;",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 820,
        "y": 240,
        "wires": [
            [
                "de2e33b0d5cd1e5a",
                "e14a869f5c84f679"
            ]
        ]
    },
    {
        "id": "b7db29d94c7694d7",
        "type": "postgresql",
        "z": "d70a9e0896099318",
        "name": "InsertOnGoingParentStatus",
        "query": "INSERT INTO public.task_detail_status\n(id, task_detail_id, status, notes, \ncreated_at, created_by, updated_at, updated_by)\nVALUES('{{ msg.uuid }}', '{{ msg.taskparent.id}}', 'ONGOING', NULL, \nCURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}', CURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1020,
        "y": 100,
        "wires": [
            [
                "c4636f860835a789",
                "ec52ebc4b8fadd09"
            ]
        ]
    },
    {
        "id": "c4636f860835a789",
        "type": "link out",
        "z": "d70a9e0896099318",
        "name": "DebugOut",
        "mode": "link",
        "links": [
            "a5cc43c4e5a2510c"
        ],
        "x": 1185,
        "y": 80,
        "wires": []
    },
    {
        "id": "de2e33b0d5cd1e5a",
        "type": "switch",
        "z": "d70a9e0896099318",
        "name": "IsAllChildTaskClosed?",
        "property": "payload.is_all_child_closed",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1060,
        "y": 240,
        "wires": [
            [],
            [
                "846418b0b024265d"
            ]
        ]
    },
    {
        "id": "e14a869f5c84f679",
        "type": "link out",
        "z": "d70a9e0896099318",
        "name": "DebugOut",
        "mode": "link",
        "links": [
            "a5cc43c4e5a2510c"
        ],
        "x": 975,
        "y": 200,
        "wires": []
    },
    {
        "id": "846418b0b024265d",
        "type": "change",
        "z": "d70a9e0896099318",
        "name": "SetTaskDetail",
        "rules": [
            {
                "t": "move",
                "p": "taskparent",
                "pt": "msg",
                "to": "taskdetail",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 300,
        "wires": [
            [
                "794ffa6194688959",
                "797cd5610ee8d9ac"
            ]
        ]
    },
    {
        "id": "794ffa6194688959",
        "type": "subflow:6ac2c89ac21b5d77",
        "z": "d70a9e0896099318",
        "name": "",
        "x": 1060,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "a02deb49ccc21f40",
        "type": "debug",
        "z": "d70a9e0896099318",
        "name": "DebugCloseParentTask",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 210,
        "y": 40,
        "wires": []
    },
    {
        "id": "a5cc43c4e5a2510c",
        "type": "link in",
        "z": "d70a9e0896099318",
        "name": "DebugIn",
        "links": [
            "28e0feedaf3852a1",
            "c4636f860835a789",
            "e14a869f5c84f679"
        ],
        "x": 45,
        "y": 40,
        "wires": [
            [
                "a02deb49ccc21f40"
            ]
        ]
    },
    {
        "id": "797cd5610ee8d9ac",
        "type": "debug",
        "z": "d70a9e0896099318",
        "name": "DebugTaskDetail",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "taskdetail",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 340,
        "wires": []
    },
    {
        "id": "9a0eba4737c12220",
        "type": "debug",
        "z": "d70a9e0896099318",
        "name": "DebugTaskParent",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "taskparent",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 630,
        "y": 60,
        "wires": []
    },
    {
        "id": "9e8a8c8b466af4e2",
        "type": "postgresql",
        "z": "c30450b75f88597b",
        "name": "InsertTaskDetailNonMultiLevelUserGroup",
        "query": "INSERT INTO public.task_detail\n(id, task_header_id, task_parent_id, \ntarget, level, is_multilevel, amount, assignee_id, \ncreated_at, created_by, updated_at, updated_by)\nVALUES('{{ msg.uuid }}', '{{ msg.req.body.task_header_id }}', '{{ msg.req.body.task_detail_id }}',\n'USER_GROUP', 0, FALSE, 0, '{{ msg.req.body.user_id }}',\nCURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}', CURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 660,
        "y": 100,
        "wires": [
            [
                "156f15e67fea4d37",
                "00bcbaf08d3c5de6"
            ]
        ],
        "info": "Insert Task Detail for Non MultiLevel User Group"
    },
    {
        "id": "616e8a3409faed45",
        "type": "subflow:7b1a86285ed2955f",
        "z": "c30450b75f88597b",
        "name": "",
        "x": 390,
        "y": 100,
        "wires": [
            [
                "9e8a8c8b466af4e2"
            ]
        ]
    },
    {
        "id": "00bcbaf08d3c5de6",
        "type": "change",
        "z": "c30450b75f88597b",
        "name": "SetTaskDetail",
        "rules": [
            {
                "t": "set",
                "p": "taskdetail.id",
                "pt": "msg",
                "to": "uuid",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "taskdetail.target",
                "pt": "msg",
                "to": "USER_GROUP",
                "tot": "str"
            },
            {
                "t": "set",
                "p": "taskdetail.level",
                "pt": "msg",
                "to": "1",
                "tot": "num"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 180,
        "wires": [
            [
                "308d7f677c033f02"
            ]
        ]
    },
    {
        "id": "308d7f677c033f02",
        "type": "subflow:6ac2c89ac21b5d77",
        "z": "c30450b75f88597b",
        "name": "CloseChildTask",
        "x": 400,
        "y": 180,
        "wires": [
            [
                "02e1c4162a03516b"
            ]
        ]
    },
    {
        "id": "e58af45e7aa3cc12",
        "type": "postgresql",
        "z": "c30450b75f88597b",
        "name": "GetTotalTaskDetail",
        "query": "SELECT COUNT(*)::integer as total FROM task_detail td\nWHERE task_parent_id = '{{ msg.req.body.task_detail_id }}';",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 850,
        "y": 220,
        "wires": [
            [
                "71361cb62d096874",
                "3059b030b51e258a"
            ]
        ]
    },
    {
        "id": "71361cb62d096874",
        "type": "switch",
        "z": "c30450b75f88597b",
        "name": "CheckTotalAmount",
        "property": "payload.total",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "taskparent.amount",
                "vt": "msg"
            },
            {
                "t": "eq",
                "v": "taskparent.amount",
                "vt": "msg"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1070,
        "y": 220,
        "wires": [
            [
                "d4ca9a405a89a36f"
            ],
            [
                "d1d0da4b25475716"
            ]
        ]
    },
    {
        "id": "451c2aceaebedb37",
        "type": "subflow:6ac2c89ac21b5d77",
        "z": "c30450b75f88597b",
        "name": "CloseParentTask",
        "x": 1550,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "d1d0da4b25475716",
        "type": "change",
        "z": "c30450b75f88597b",
        "name": "MoveTaskParentToDetail",
        "rules": [
            {
                "t": "move",
                "p": "taskparent",
                "pt": "msg",
                "to": "taskdetail",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1310,
        "y": 240,
        "wires": [
            [
                "451c2aceaebedb37"
            ]
        ]
    },
    {
        "id": "960f1125914a3bd0",
        "type": "link in",
        "z": "c30450b75f88597b",
        "name": "DebugIn",
        "links": [
            "156f15e67fea4d37",
            "2671838c7f7ac951",
            "d0134b7a435f27f6",
            "3059b030b51e258a",
            "5c22cf60a2459b81"
        ],
        "x": 55,
        "y": 40,
        "wires": [
            [
                "40ae70d7a706f6aa"
            ]
        ]
    },
    {
        "id": "40ae70d7a706f6aa",
        "type": "debug",
        "z": "c30450b75f88597b",
        "name": "DebugGroupTask",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 190,
        "y": 40,
        "wires": []
    },
    {
        "id": "156f15e67fea4d37",
        "type": "link out",
        "z": "c30450b75f88597b",
        "name": "DebugOut",
        "mode": "link",
        "links": [
            "960f1125914a3bd0"
        ],
        "x": 875,
        "y": 80,
        "wires": []
    },
    {
        "id": "3059b030b51e258a",
        "type": "link out",
        "z": "c30450b75f88597b",
        "name": "DebugOut",
        "mode": "link",
        "links": [
            "960f1125914a3bd0"
        ],
        "x": 995,
        "y": 260,
        "wires": []
    },
    {
        "id": "02e1c4162a03516b",
        "type": "switch",
        "z": "c30450b75f88597b",
        "name": "CheckAction",
        "property": "req.body.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "REJECT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REVISE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "APPROVE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SIGNING",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 590,
        "y": 180,
        "wires": [
            [],
            [],
            [
                "e58af45e7aa3cc12"
            ],
            [
                "e58af45e7aa3cc12"
            ]
        ]
    },
    {
        "id": "6c8647c42a4b9fd3",
        "type": "change",
        "z": "c30450b75f88597b",
        "name": "SetTaskParent",
        "rules": [
            {
                "t": "move",
                "p": "taskdetail",
                "pt": "msg",
                "to": "taskparent",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 200,
        "y": 100,
        "wires": [
            [
                "616e8a3409faed45"
            ]
        ]
    },
    {
        "id": "01926cdd659c8464",
        "type": "postgresql",
        "z": "c30450b75f88597b",
        "name": "ReleaseTaskParent",
        "query": "INSERT INTO public.task_detail_status\n(id, task_detail_id, notes, status,\ncreated_at, created_by, updated_at, updated_by)\nVALUES('{{ msg.uuid }}', '{{ msg.taskparent.id }}', '{{ msg.req.body.notes }}', 'ASSIGNED',\nCURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}', CURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1470,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "d4ca9a405a89a36f",
        "type": "subflow:7b1a86285ed2955f",
        "z": "c30450b75f88597b",
        "name": "",
        "x": 1270,
        "y": 200,
        "wires": [
            [
                "01926cdd659c8464"
            ]
        ]
    },
    {
        "id": "ca7c48d0f80e5505",
        "type": "postgresql",
        "z": "386204d4507e3dd9",
        "name": "GetTaskDetailStatus",
        "query": "SELECT t.*, ts.notes, ts.status\nFROM task_detail t\nJOIN (\n  SELECT task_detail_id, notes, status\n  FROM task_detail_status\n  WHERE task_detail_id = '{{ msg.req.body.task_detail_id }}'\n  ORDER BY created_at DESC\n  LIMIT 1\n) ts ON ts.task_detail_id = t.id;",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 200,
        "y": 80,
        "wires": [
            [
                "9248e7dd6080b09c",
                "32880eb892c0a733"
            ]
        ]
    },
    {
        "id": "e3a76b4722cee888",
        "type": "switch",
        "z": "386204d4507e3dd9",
        "name": "CheckStatus",
        "property": "taskdetail.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OWNED",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 240,
        "wires": [
            [
                "3c7d0385cb964ccd"
            ],
            [
                "2b1bbb9562d2f3c1"
            ]
        ]
    },
    {
        "id": "2f31938017ab82cd",
        "type": "subflow:6ac2c89ac21b5d77",
        "z": "386204d4507e3dd9",
        "name": "",
        "x": 760,
        "y": 120,
        "wires": [
            [
                "430221f7737202e1"
            ]
        ]
    },
    {
        "id": "659c3f45a2274716",
        "type": "change",
        "z": "386204d4507e3dd9",
        "name": "SetTaskDetail",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "taskdetail",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 180,
        "y": 240,
        "wires": [
            [
                "e3a76b4722cee888",
                "f6e5d9cd6a34be6b"
            ]
        ]
    },
    {
        "id": "2b1bbb9562d2f3c1",
        "type": "change",
        "z": "386204d4507e3dd9",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Unable to close task because last task state was not OWNED\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 300,
        "wires": [
            [
                "fb87a4fbdd0a57fe"
            ]
        ]
    },
    {
        "id": "fb87a4fbdd0a57fe",
        "type": "http response",
        "z": "386204d4507e3dd9",
        "name": "StatusErrorResp",
        "statusCode": "400",
        "headers": {},
        "x": 720,
        "y": 300,
        "wires": []
    },
    {
        "id": "9248e7dd6080b09c",
        "type": "switch",
        "z": "386204d4507e3dd9",
        "name": "CheckTaskDetails",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 430,
        "y": 80,
        "wires": [
            [
                "9c3484ef965a8d40"
            ],
            [
                "659c3f45a2274716"
            ]
        ]
    },
    {
        "id": "9c3484ef965a8d40",
        "type": "change",
        "z": "386204d4507e3dd9",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task Detail Not Found\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 60,
        "wires": [
            [
                "0c08ba4e03c3d2b3"
            ]
        ]
    },
    {
        "id": "0c08ba4e03c3d2b3",
        "type": "http response",
        "z": "386204d4507e3dd9",
        "name": "TaskDetailsNotFoundResp",
        "statusCode": "400",
        "headers": {},
        "x": 860,
        "y": 60,
        "wires": []
    },
    {
        "id": "3c7d0385cb964ccd",
        "type": "switch",
        "z": "386204d4507e3dd9",
        "name": "CheckTarget",
        "property": "taskdetail.target",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "USER_GROUP",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "USER",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "GROUP",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 550,
        "y": 180,
        "wires": [
            [
                "2f31938017ab82cd"
            ],
            [
                "66be9e2373014e08"
            ],
            [
                "b122f144dd696eed"
            ]
        ]
    },
    {
        "id": "b122f144dd696eed",
        "type": "subflow:c30450b75f88597b",
        "z": "386204d4507e3dd9",
        "name": "",
        "x": 750,
        "y": 240,
        "wires": [
            [
                "d3b54503674558a0"
            ]
        ]
    },
    {
        "id": "32880eb892c0a733",
        "type": "debug",
        "z": "386204d4507e3dd9",
        "name": "DebugCloseTask",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 430,
        "y": 40,
        "wires": []
    },
    {
        "id": "66be9e2373014e08",
        "type": "subflow:6ac2c89ac21b5d77",
        "z": "386204d4507e3dd9",
        "name": "",
        "x": 760,
        "y": 180,
        "wires": [
            [
                "d3b54503674558a0"
            ]
        ]
    },
    {
        "id": "430221f7737202e1",
        "type": "subflow:d70a9e0896099318",
        "z": "386204d4507e3dd9",
        "name": "",
        "x": 990,
        "y": 120,
        "wires": [
            [
                "d3b54503674558a0"
            ]
        ]
    },
    {
        "id": "d3b54503674558a0",
        "type": "subflow:7110576ffdc36126",
        "z": "386204d4507e3dd9",
        "name": "",
        "x": 1230,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "f6e5d9cd6a34be6b",
        "type": "debug",
        "z": "386204d4507e3dd9",
        "name": "DebugTaskDetail",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "taskdetail",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 390,
        "y": 360,
        "wires": []
    },
    {
        "id": "169f7ada662f67b2",
        "type": "subflow:4627e66fbd3c569a",
        "z": "6da56882aa07c67e",
        "name": "",
        "x": 200,
        "y": 60,
        "wires": [
            [
                "e5c85d7a3733e759"
            ]
        ]
    },
    {
        "id": "eebe35f0d295c210",
        "type": "subflow:358efc91a2a58551",
        "z": "6da56882aa07c67e",
        "name": "",
        "x": 470,
        "y": 80,
        "wires": [
            [
                "4402e24aad868e12"
            ]
        ]
    },
    {
        "id": "e5c85d7a3733e759",
        "type": "switch",
        "z": "6da56882aa07c67e",
        "name": "CheckTaskHeadStatus",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "NEW",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 220,
        "y": 120,
        "wires": [
            [
                "eebe35f0d295c210"
            ],
            [
                "0c1f45ab3fd02026"
            ],
            [
                "75393d5e2e9cbfaa"
            ]
        ]
    },
    {
        "id": "75393d5e2e9cbfaa",
        "type": "change",
        "z": "6da56882aa07c67e",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task is running so it can't be canceled\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 160,
        "wires": [
            [
                "ac09f586927706dd"
            ]
        ]
    },
    {
        "id": "ac09f586927706dd",
        "type": "http response",
        "z": "6da56882aa07c67e",
        "name": "ErrorResp",
        "statusCode": "400",
        "headers": {},
        "x": 590,
        "y": 160,
        "wires": []
    },
    {
        "id": "0c1f45ab3fd02026",
        "type": "change",
        "z": "6da56882aa07c67e",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task is already canceled\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 420,
        "y": 120,
        "wires": [
            [
                "a6093f6b7b88efe0"
            ]
        ]
    },
    {
        "id": "a6093f6b7b88efe0",
        "type": "http response",
        "z": "6da56882aa07c67e",
        "name": "ErrorResp",
        "statusCode": "400",
        "headers": {},
        "x": 590,
        "y": 120,
        "wires": []
    },
    {
        "id": "a949af1f632ce29f",
        "type": "join",
        "z": "6da56882aa07c67e",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 1370,
        "y": 60,
        "wires": [
            []
        ]
    },
    {
        "id": "4402e24aad868e12",
        "type": "postgresql",
        "z": "6da56882aa07c67e",
        "name": "GetAllTaskDetail",
        "query": "SELECT t.*, ts.notes, ts.status\nFROM task_detail t\nLEFT JOIN (\n  SELECT DISTINCT ON (task_detail_id) task_detail_id, notes, status\n  FROM task_detail_status\n  ORDER BY task_detail_id, created_at DESC\n) ts ON ts.task_detail_id = t.id\nWHERE t.task_header_id = '{{ msg.req.body.task_header_id }}'\nAND t.task_parent_id IS NULL",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": "1",
        "outputs": 1,
        "x": 720,
        "y": 80,
        "wires": [
            [
                "f6016c319e6f5359",
                "3af2fe849fc88417"
            ]
        ]
    },
    {
        "id": "f6016c319e6f5359",
        "type": "switch",
        "z": "6da56882aa07c67e",
        "name": "CheckTaskDetails",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 950,
        "y": 80,
        "wires": [
            [
                "bbee11e1f7429baa"
            ],
            [
                "0f7430ed3dc7b091"
            ]
        ]
    },
    {
        "id": "3af2fe849fc88417",
        "type": "debug",
        "z": "6da56882aa07c67e",
        "name": "debugGetAllTaskDetail",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 960,
        "y": 40,
        "wires": []
    },
    {
        "id": "bbee11e1f7429baa",
        "type": "change",
        "z": "6da56882aa07c67e",
        "name": "NextRow",
        "rules": [
            {
                "t": "set",
                "p": "tick",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1200,
        "y": 60,
        "wires": [
            [
                "a949af1f632ce29f",
                "8c16b50e9b085c0c"
            ]
        ]
    },
    {
        "id": "8c16b50e9b085c0c",
        "type": "link out",
        "z": "6da56882aa07c67e",
        "name": "NextRowOut",
        "mode": "link",
        "links": [
            "0d62b94d1dc8230a"
        ],
        "x": 1335,
        "y": 20,
        "wires": []
    },
    {
        "id": "0f7430ed3dc7b091",
        "type": "change",
        "z": "6da56882aa07c67e",
        "name": "SetTaskDetail",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "taskdetail",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 960,
        "y": 140,
        "wires": [
            [
                "b8dc2487373c82b2"
            ]
        ]
    },
    {
        "id": "0d62b94d1dc8230a",
        "type": "link in",
        "z": "6da56882aa07c67e",
        "name": "NextRowIn",
        "links": [
            "8c16b50e9b085c0c"
        ],
        "x": 565,
        "y": 40,
        "wires": [
            [
                "4402e24aad868e12"
            ]
        ]
    },
    {
        "id": "b8dc2487373c82b2",
        "type": "subflow:7b1a86285ed2955f",
        "z": "6da56882aa07c67e",
        "name": "",
        "x": 1150,
        "y": 140,
        "wires": [
            [
                "fc780ea0dc71038c"
            ]
        ]
    },
    {
        "id": "fc780ea0dc71038c",
        "type": "postgresql",
        "z": "6da56882aa07c67e",
        "name": "InsertCancelStatus",
        "query": "INSERT INTO public.task_detail_status\n(id, task_detail_id, notes, status,\ncreated_at, created_by, updated_at, updated_by)\nVALUES('{{ msg.uuid }}', '{{ msg.taskdetail.id }}', '{{ msg.req.body.notes }}', 'CANCELED',\nCURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}', CURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1350,
        "y": 140,
        "wires": [
            [
                "bbee11e1f7429baa"
            ]
        ]
    },
    {
        "id": "80be288de5ce5d5a",
        "type": "postgresql",
        "z": "597a53d06ff810d8",
        "name": "GetAllTaskDetail",
        "query": "SELECT t.*, ts.notes, ts.status\nFROM task_detail t\nLEFT JOIN (\n  SELECT DISTINCT ON (task_detail_id) task_detail_id, notes, status\n  FROM task_detail_status\n  ORDER BY task_detail_id, created_at DESC\n) ts ON ts.task_detail_id = t.id\nWHERE t.task_header_id = '{{ msg.req.body.task_header_id }}'",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": "1",
        "outputs": 1,
        "x": 200,
        "y": 60,
        "wires": [
            [
                "3a1a0a0ce6f2aacb",
                "66ecba15c2e27cf0"
            ]
        ]
    },
    {
        "id": "66ecba15c2e27cf0",
        "type": "debug",
        "z": "597a53d06ff810d8",
        "name": "DebugTaskDetailValidation",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 440,
        "y": 120,
        "wires": []
    },
    {
        "id": "3a1a0a0ce6f2aacb",
        "type": "switch",
        "z": "597a53d06ff810d8",
        "name": "CheckTaskDetails",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 60,
        "wires": [
            [
                "cb0b11ab3e69e2f8"
            ],
            []
        ]
    },
    {
        "id": "a80d8185ca3547b9",
        "type": "http response",
        "z": "597a53d06ff810d8",
        "name": "TaskDetailsNotFoundResp",
        "statusCode": "400",
        "headers": {},
        "x": 860,
        "y": 40,
        "wires": []
    },
    {
        "id": "cb0b11ab3e69e2f8",
        "type": "change",
        "z": "597a53d06ff810d8",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task Detail Not Found\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 640,
        "y": 40,
        "wires": [
            [
                "a80d8185ca3547b9"
            ]
        ]
    },
    {
        "id": "942763ff92881f91",
        "type": "subflow:7b1a86285ed2955f",
        "z": "6ac2c89ac21b5d77",
        "name": "",
        "x": 170,
        "y": 480,
        "wires": [
            [
                "b9d976472857c9df"
            ]
        ]
    },
    {
        "id": "aeb6812d0c27da30",
        "type": "postgresql",
        "z": "6ac2c89ac21b5d77",
        "name": "InsertNewStatus",
        "query": "INSERT INTO public.task_detail_status\n(id, task_detail_id, notes, status,\ncreated_at, created_by, updated_at, updated_by)\nVALUES('{{ msg.uuid }}', '{{ msg.taskdetail.id }}', '{{ msg.req.body.notes }}', 'NEW',\nCURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}', CURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 140,
        "wires": [
            [
                "96f5f0b99d135869"
            ]
        ]
    },
    {
        "id": "b9d976472857c9df",
        "type": "switch",
        "z": "6ac2c89ac21b5d77",
        "name": "CheckAction",
        "property": "req.body.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CREATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "APPROVE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SIGNING",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REVISE",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 5,
        "x": 350,
        "y": 480,
        "wires": [
            [
                "aeb6812d0c27da30"
            ],
            [
                "810768ae3867b382"
            ],
            [
                "aeabba7bccfdce13"
            ],
            [
                "1e3cf8b0c5020366"
            ],
            [
                "1e3cf8b0c5020366"
            ]
        ]
    },
    {
        "id": "07aa6c8fdd023f63",
        "type": "postgresql",
        "z": "6ac2c89ac21b5d77",
        "name": "InsertAssignedStatus",
        "query": "INSERT INTO public.task_detail_status\n(id, task_detail_id, notes, status,\ncreated_at, created_by, updated_at, updated_by)\nVALUES('{{ msg.uuid }}', '{{ msg.taskdetail.id }}', NULL, 'ASSIGNED',\nCURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}', CURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1360,
        "y": 160,
        "wires": [
            [
                "29d8cddc46cf6a8e",
                "00c8ddf50b76d6d6"
            ]
        ]
    },
    {
        "id": "8876831869567f9d",
        "type": "subflow:7b1a86285ed2955f",
        "z": "6ac2c89ac21b5d77",
        "name": "",
        "x": 1150,
        "y": 160,
        "wires": [
            [
                "07aa6c8fdd023f63"
            ]
        ]
    },
    {
        "id": "96f5f0b99d135869",
        "type": "switch",
        "z": "6ac2c89ac21b5d77",
        "name": "CheckLevel",
        "property": "taskdetail.level",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 770,
        "y": 140,
        "wires": [
            [
                "01d2212d830b3059"
            ],
            [
                "eca566a754ad428e"
            ]
        ]
    },
    {
        "id": "8b02a324153f706c",
        "type": "postgresql",
        "z": "6ac2c89ac21b5d77",
        "name": "GetNextLevelByHeader",
        "query": "SELECT * FROM task_detail td \nWHERE task_header_id = '{{ msg.req.body.task_header_id }}' \nAND level = {{ msg.taskdetail.level }} + 1 \nAND task_parent_id is NULL",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1030,
        "y": 460,
        "wires": [
            [
                "b94dcd036ca8374e",
                "af84ead87bb53abb"
            ]
        ]
    },
    {
        "id": "b94dcd036ca8374e",
        "type": "switch",
        "z": "6ac2c89ac21b5d77",
        "name": "CheckTaskDetails",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1290,
        "y": 420,
        "wires": [
            [
                "f2be3af80b7a6409"
            ],
            [
                "90c67a02d8911bbd"
            ]
        ]
    },
    {
        "id": "90c67a02d8911bbd",
        "type": "change",
        "z": "6ac2c89ac21b5d77",
        "name": "SetTaskDetail",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "taskdetail",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1580,
        "y": 480,
        "wires": [
            [
                "555569bb62543d80",
                "00799be24ab743d5"
            ]
        ]
    },
    {
        "id": "1e3cf8b0c5020366",
        "type": "postgresql",
        "z": "6ac2c89ac21b5d77",
        "name": "InsertCloseStatus",
        "query": "INSERT INTO public.task_detail_status\n(id, task_detail_id, notes, status,\ncreated_at, created_by, updated_at, updated_by)\nVALUES('{{ msg.uuid }}', '{{ msg.taskdetail.id }}', CONCAT('{{ msg.req.body.action }}', ' - ', '{{ msg.req.body.notes }}'), 'CLOSED',\nCURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}', CURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 590,
        "y": 760,
        "wires": [
            [
                "30bee1a0e550bb47"
            ]
        ]
    },
    {
        "id": "810768ae3867b382",
        "type": "postgresql",
        "z": "6ac2c89ac21b5d77",
        "name": "InsertCloseStatus",
        "query": "INSERT INTO public.task_detail_status\n(id, task_detail_id, notes, status,\ncreated_at, created_by, updated_at, updated_by)\nVALUES('{{ msg.uuid }}', '{{ msg.taskdetail.id }}', CONCAT('{{ msg.req.body.action }}', ' - ', '{{ msg.req.body.notes }}'), 'CLOSED',\nCURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}', CURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 590,
        "y": 420,
        "wires": [
            [
                "ddb038c956e28ddd"
            ]
        ]
    },
    {
        "id": "30bee1a0e550bb47",
        "type": "postgresql",
        "z": "6ac2c89ac21b5d77",
        "name": "GetOtherAssigned",
        "query": "SELECT t.*, ts.notes, ts.status\nFROM task_detail t\nLEFT JOIN (\n  SELECT DISTINCT ON (task_detail_id) task_detail_id, notes, status\n  FROM task_detail_status\n  ORDER BY task_detail_id, created_at DESC  \n) ts ON ts.task_detail_id = t.id\nWHERE t.task_header_id = '{{ msg.req.body.task_header_id }}'\nAND ts.status IN ('ASSIGNED', 'OWNED')",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 810,
        "y": 760,
        "wires": [
            [
                "e4a41dcb85322a30",
                "ef8fc3282fc6521b"
            ]
        ]
    },
    {
        "id": "e4a41dcb85322a30",
        "type": "switch",
        "z": "6ac2c89ac21b5d77",
        "name": "CheckTaskDetails",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "empty"
            },
            {
                "t": "nempty"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1030,
        "y": 760,
        "wires": [
            [
                "2d62045b65b9fb34"
            ],
            [
                "ae09ec8f04576de7"
            ]
        ]
    },
    {
        "id": "9be2d8604f4da838",
        "type": "change",
        "z": "6ac2c89ac21b5d77",
        "name": "SetTaskDetail",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "taskdetail",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1400,
        "y": 780,
        "wires": [
            [
                "c3248c938f6eb238"
            ]
        ]
    },
    {
        "id": "c3248c938f6eb238",
        "type": "subflow:7b1a86285ed2955f",
        "z": "6ac2c89ac21b5d77",
        "name": "",
        "x": 1590,
        "y": 780,
        "wires": [
            [
                "05a0e93f928fabcf"
            ]
        ]
    },
    {
        "id": "05a0e93f928fabcf",
        "type": "postgresql",
        "z": "6ac2c89ac21b5d77",
        "name": "InsertCanceledStatus",
        "query": "INSERT INTO public.task_detail_status\n(id, task_detail_id, notes, status,\ncreated_at, created_by, updated_at, updated_by)\nVALUES('{{ msg.uuid }}', '{{ msg.taskdetail.id }}', '{{ msg.req.body.notes }}', 'CANCELED',\nCURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}', CURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1800,
        "y": 780,
        "wires": [
            [
                "4f8a9d2b31119cb7"
            ]
        ]
    },
    {
        "id": "ae09ec8f04576de7",
        "type": "split",
        "z": "6ac2c89ac21b5d77",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1230,
        "y": 780,
        "wires": [
            [
                "9be2d8604f4da838"
            ]
        ]
    },
    {
        "id": "4f8a9d2b31119cb7",
        "type": "join",
        "z": "6ac2c89ac21b5d77",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 1990,
        "y": 780,
        "wires": [
            [
                "50dbba8f8fc6a8f1"
            ]
        ]
    },
    {
        "id": "ddb038c956e28ddd",
        "type": "switch",
        "z": "6ac2c89ac21b5d77",
        "name": "CheckTarget",
        "property": "taskdetail.target",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "USER_GROUP",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 420,
        "wires": [
            [
                "134b1950fa4358e4"
            ],
            [
                "8b02a324153f706c"
            ]
        ]
    },
    {
        "id": "134b1950fa4358e4",
        "type": "postgresql",
        "z": "6ac2c89ac21b5d77",
        "name": "GetNextLevelByParent",
        "query": "SELECT * FROM task_detail td \nWHERE task_parent_id = '{{ msg.taskdetail.task_parent_id }}'\nAND level = {{ msg.taskdetail.level }} + 1",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1020,
        "y": 380,
        "wires": [
            [
                "b94dcd036ca8374e",
                "edc0c9f40d428f25"
            ]
        ]
    },
    {
        "id": "01d2212d830b3059",
        "type": "switch",
        "z": "6ac2c89ac21b5d77",
        "name": "CheckTarget",
        "property": "taskdetail.target",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "USER_GROUP",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "GROUP",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "USER",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 970,
        "y": 100,
        "wires": [
            [
                "7bbc52a26f06edf6"
            ],
            [
                "5209accce66ebd7e"
            ],
            [
                "8876831869567f9d"
            ]
        ]
    },
    {
        "id": "c7975cf820edad09",
        "type": "postgresql",
        "z": "6ac2c89ac21b5d77",
        "name": "GetAllChildTask",
        "query": "SELECT t.*, ts.notes, ts.status\nFROM task_detail t\nLEFT JOIN (\n  SELECT DISTINCT ON (task_detail_id) task_detail_id, notes, status\n  FROM task_detail_status\n  ORDER BY task_detail_id, created_at DESC\n) ts ON ts.task_detail_id = t.id\nWHERE t.task_parent_id = '{{ msg.taskdetail.id }}'\nAND t.level = 1",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": "1",
        "outputs": 1,
        "x": 1680,
        "y": 100,
        "wires": [
            [
                "533535b4977196ac",
                "a934ee6d71a73b1b"
            ]
        ]
    },
    {
        "id": "91ee07a28d7c6b01",
        "type": "join",
        "z": "6ac2c89ac21b5d77",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 2330,
        "y": 220,
        "wires": [
            [
                "8b05a14747ae8203"
            ]
        ]
    },
    {
        "id": "1823b91cd2549e65",
        "type": "subflow:7b1a86285ed2955f",
        "z": "6ac2c89ac21b5d77",
        "name": "",
        "x": 1890,
        "y": 220,
        "wires": [
            [
                "679caeb722b1de36"
            ]
        ]
    },
    {
        "id": "679caeb722b1de36",
        "type": "postgresql",
        "z": "6ac2c89ac21b5d77",
        "name": "InsertAssignedChildStatus",
        "query": "INSERT INTO public.task_detail_status\n(id, task_detail_id, notes, status,\ncreated_at, created_by, updated_at, updated_by)\nVALUES('{{ msg.uuid }}', '{{ msg.taskdetail.id }}', NULL, 'ASSIGNED',\nCURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}', CURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2120,
        "y": 220,
        "wires": [
            [
                "91ee07a28d7c6b01",
                "2b3055511eaff6a9"
            ]
        ]
    },
    {
        "id": "edc0c9f40d428f25",
        "type": "debug",
        "z": "6ac2c89ac21b5d77",
        "name": "debugNextLevelByParent",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 340,
        "wires": []
    },
    {
        "id": "af84ead87bb53abb",
        "type": "debug",
        "z": "6ac2c89ac21b5d77",
        "name": "debugNextLevelByHeader",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1310,
        "y": 500,
        "wires": []
    },
    {
        "id": "555569bb62543d80",
        "type": "debug",
        "z": "6ac2c89ac21b5d77",
        "name": "debugSetTaskDetail",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "taskdetail",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1820,
        "y": 520,
        "wires": []
    },
    {
        "id": "00799be24ab743d5",
        "type": "switch",
        "z": "6ac2c89ac21b5d77",
        "name": "CheckTarget",
        "property": "taskdetail.target",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "GROUP",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1790,
        "y": 440,
        "wires": [
            [
                "e0bb4f3feb884302"
            ],
            [
                "a8e69ea0c51cb041"
            ]
        ]
    },
    {
        "id": "1e7a6e3c497b11c8",
        "type": "link in",
        "z": "6ac2c89ac21b5d77",
        "name": "FlowIn",
        "links": [
            "bc3d88e93677f892",
            "d01973e39832e088",
            "b23edba242a58fe7",
            "50dbba8f8fc6a8f1",
            "2d62045b65b9fb34",
            "989f79d2b1f81863",
            "eca566a754ad428e",
            "7bbc52a26f06edf6",
            "6273c1206ee91f32",
            "8b05a14747ae8203",
            "29d8cddc46cf6a8e",
            "386b43277bdcb870"
        ],
        "x": 45,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "50dbba8f8fc6a8f1",
        "type": "link out",
        "z": "6ac2c89ac21b5d77",
        "name": "FlowOut",
        "mode": "link",
        "links": [
            "1e7a6e3c497b11c8"
        ],
        "x": 2095,
        "y": 780,
        "wires": []
    },
    {
        "id": "2d62045b65b9fb34",
        "type": "link out",
        "z": "6ac2c89ac21b5d77",
        "name": "FlowOut",
        "mode": "link",
        "links": [
            "1e7a6e3c497b11c8"
        ],
        "x": 1195,
        "y": 740,
        "wires": []
    },
    {
        "id": "eca566a754ad428e",
        "type": "link out",
        "z": "6ac2c89ac21b5d77",
        "name": "FlowOut",
        "mode": "link",
        "links": [
            "1e7a6e3c497b11c8"
        ],
        "x": 915,
        "y": 180,
        "wires": []
    },
    {
        "id": "ef8fc3282fc6521b",
        "type": "debug",
        "z": "6ac2c89ac21b5d77",
        "name": "debugGetOtherAssigned",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1050,
        "y": 700,
        "wires": []
    },
    {
        "id": "533535b4977196ac",
        "type": "debug",
        "z": "6ac2c89ac21b5d77",
        "name": "debugGetAllChildTask",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1920,
        "y": 60,
        "wires": []
    },
    {
        "id": "29d8cddc46cf6a8e",
        "type": "link out",
        "z": "6ac2c89ac21b5d77",
        "name": "FlowOut",
        "mode": "link",
        "links": [
            "1e7a6e3c497b11c8"
        ],
        "x": 1515,
        "y": 160,
        "wires": []
    },
    {
        "id": "8b05a14747ae8203",
        "type": "link out",
        "z": "6ac2c89ac21b5d77",
        "name": "FlowOut",
        "mode": "link",
        "links": [
            "1e7a6e3c497b11c8"
        ],
        "x": 2435,
        "y": 220,
        "wires": []
    },
    {
        "id": "a407319b00ba7744",
        "type": "link in",
        "z": "6ac2c89ac21b5d77",
        "name": "AssignStatusIn",
        "links": [
            "bb54060d44652945",
            "a8e69ea0c51cb041"
        ],
        "x": 1015,
        "y": 160,
        "wires": [
            [
                "8876831869567f9d"
            ]
        ]
    },
    {
        "id": "a8e69ea0c51cb041",
        "type": "link out",
        "z": "6ac2c89ac21b5d77",
        "name": "AssignStatusOut",
        "mode": "link",
        "links": [
            "a407319b00ba7744"
        ],
        "x": 1935,
        "y": 460,
        "wires": []
    },
    {
        "id": "e0bb4f3feb884302",
        "type": "link out",
        "z": "6ac2c89ac21b5d77",
        "name": "GetChildTaskOut",
        "mode": "link",
        "links": [
            "f5a08deb155c3377"
        ],
        "x": 1935,
        "y": 420,
        "wires": []
    },
    {
        "id": "7bbc52a26f06edf6",
        "type": "link out",
        "z": "6ac2c89ac21b5d77",
        "name": "FlowOut",
        "mode": "link",
        "links": [
            "1e7a6e3c497b11c8"
        ],
        "x": 1085,
        "y": 60,
        "wires": []
    },
    {
        "id": "2bb7725073d63401",
        "type": "postgresql",
        "z": "6ac2c89ac21b5d77",
        "name": "InsertNewStatus",
        "query": "INSERT INTO public.task_detail_status\n(id, task_detail_id, notes, status,\ncreated_at, created_by, updated_at, updated_by)\nVALUES('{{ msg.uuid }}', '{{ msg.taskdetail.id }}', '{{ msg.req.body.notes }}', 'NEW',\nCURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}', CURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 2080,
        "y": 160,
        "wires": [
            [
                "1823b91cd2549e65"
            ]
        ]
    },
    {
        "id": "a3ee3f6745afd7cf",
        "type": "subflow:7b1a86285ed2955f",
        "z": "6ac2c89ac21b5d77",
        "name": "",
        "x": 1890,
        "y": 160,
        "wires": [
            [
                "2bb7725073d63401"
            ]
        ]
    },
    {
        "id": "5209accce66ebd7e",
        "type": "postgresql",
        "z": "6ac2c89ac21b5d77",
        "name": "CountChild",
        "query": "SELECT COUNT(*) AS total_child\nFROM task_detail t\nWHERE t.task_parent_id = '{{ msg.taskdetail.id }}'\nAND t.level = 1",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": "1",
        "outputs": 1,
        "x": 1250,
        "y": 100,
        "wires": [
            [
                "3d5ef74c257d2f73",
                "3ea9b4dc47961f85"
            ]
        ]
    },
    {
        "id": "3d5ef74c257d2f73",
        "type": "switch",
        "z": "6ac2c89ac21b5d77",
        "name": "CheckChildCount",
        "property": "payload.total_child",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "gt",
                "v": "0",
                "vt": "num"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1450,
        "y": 60,
        "wires": [
            [
                "bb54060d44652945"
            ],
            [
                "c7975cf820edad09"
            ]
        ]
    },
    {
        "id": "bb54060d44652945",
        "type": "link out",
        "z": "6ac2c89ac21b5d77",
        "name": "AssignStatusOut",
        "mode": "link",
        "links": [
            "a407319b00ba7744"
        ],
        "x": 1605,
        "y": 40,
        "wires": []
    },
    {
        "id": "44fb54192265bad7",
        "type": "change",
        "z": "6ac2c89ac21b5d77",
        "name": "SetTaskDetail",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "taskdetail",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 2040,
        "y": 100,
        "wires": [
            [
                "a3ee3f6745afd7cf"
            ]
        ]
    },
    {
        "id": "f5a08deb155c3377",
        "type": "link in",
        "z": "6ac2c89ac21b5d77",
        "name": "GetChildTaskIn",
        "links": [
            "e0bb4f3feb884302"
        ],
        "x": 1145,
        "y": 80,
        "wires": [
            [
                "5209accce66ebd7e"
            ]
        ]
    },
    {
        "id": "3ea9b4dc47961f85",
        "type": "debug",
        "z": "6ac2c89ac21b5d77",
        "name": "debugCount",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1430,
        "y": 100,
        "wires": []
    },
    {
        "id": "f2be3af80b7a6409",
        "type": "postgresql",
        "z": "6ac2c89ac21b5d77",
        "name": "GetNextLevelByHeader",
        "query": "SELECT * FROM task_detail td \nWHERE task_header_id = '{{ msg.req.body.task_header_id }}' \nAND level = {{ msg.taskdetail.level }} + 1 \nAND task_parent_id is NULL",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1610,
        "y": 340,
        "wires": [
            [
                "0ecfd1a0c0596f44",
                "ef5bce902b57f3e1"
            ]
        ]
    },
    {
        "id": "0ecfd1a0c0596f44",
        "type": "switch",
        "z": "6ac2c89ac21b5d77",
        "name": "CheckTaskDetails",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1870,
        "y": 340,
        "wires": [
            [
                "386b43277bdcb870"
            ],
            [
                "90c67a02d8911bbd"
            ]
        ]
    },
    {
        "id": "ef5bce902b57f3e1",
        "type": "debug",
        "z": "6ac2c89ac21b5d77",
        "name": "debugNextLevelByHeader",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 300,
        "wires": []
    },
    {
        "id": "386b43277bdcb870",
        "type": "link out",
        "z": "6ac2c89ac21b5d77",
        "name": "FlowOut",
        "mode": "link",
        "links": [
            "1e7a6e3c497b11c8"
        ],
        "x": 2025,
        "y": 340,
        "wires": []
    },
    {
        "id": "a934ee6d71a73b1b",
        "type": "split",
        "z": "6ac2c89ac21b5d77",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1870,
        "y": 100,
        "wires": [
            [
                "44fb54192265bad7"
            ]
        ]
    },
    {
        "id": "4e72953e6fef1709",
        "type": "change",
        "z": "6ac2c89ac21b5d77",
        "name": "SetPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t    \"sender_id\": msg.req.body.user_id,\t    \"recipient_type\": msg.taskdetail.target,\t    \"recipient_id\": msg.taskdetail.assignee_id,\t    \"message\": msg.notif.message,\t    \"url\": msg.notif.url,\t    \"content_type\": \"TASK\",\t    \"content_id\": msg.req.body.task_header_id\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 570,
        "y": 920,
        "wires": [
            [
                "c8ca9a538f944fcf",
                "e47ceb3f456a7215",
                "cadc755c15a6136d"
            ]
        ]
    },
    {
        "id": "e47ceb3f456a7215",
        "type": "http request",
        "z": "6ac2c89ac21b5d77",
        "name": "CallSendWSNotif",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://nodered.documgt.com/send-notif-ws",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 790,
        "y": 880,
        "wires": [
            [
                "c8ca9a538f944fcf"
            ]
        ]
    },
    {
        "id": "c8ca9a538f944fcf",
        "type": "debug",
        "z": "6ac2c89ac21b5d77",
        "name": "debugNotifPayload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1030,
        "y": 920,
        "wires": []
    },
    {
        "id": "7eba7b0324e58612",
        "type": "link in",
        "z": "6ac2c89ac21b5d77",
        "name": "NotifIn",
        "links": [
            "00c8ddf50b76d6d6",
            "d20a4a1049ead6be",
            "2b3055511eaff6a9"
        ],
        "x": 45,
        "y": 920,
        "wires": [
            [
                "9c020646de2b1733"
            ]
        ]
    },
    {
        "id": "00c8ddf50b76d6d6",
        "type": "link out",
        "z": "6ac2c89ac21b5d77",
        "name": "NotifOut",
        "mode": "link",
        "links": [
            "7eba7b0324e58612"
        ],
        "x": 1515,
        "y": 200,
        "wires": []
    },
    {
        "id": "2b3055511eaff6a9",
        "type": "link out",
        "z": "6ac2c89ac21b5d77",
        "name": "NotifOut",
        "mode": "link",
        "links": [
            "7eba7b0324e58612"
        ],
        "x": 2295,
        "y": 180,
        "wires": []
    },
    {
        "id": "9c020646de2b1733",
        "type": "switch",
        "z": "6ac2c89ac21b5d77",
        "name": "CheckTarget",
        "property": "taskdetail.target",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "GROUP",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 170,
        "y": 920,
        "wires": [
            [
                "1e6286a42857bff6"
            ],
            [
                "7a64b776fd5a10ba"
            ]
        ]
    },
    {
        "id": "1e6286a42857bff6",
        "type": "change",
        "z": "6ac2c89ac21b5d77",
        "name": "SetGroupTaskMsg",
        "rules": [
            {
                "t": "set",
                "p": "notif",
                "pt": "msg",
                "to": "{\t    \"message\": \"You got a group task.\",\t    \"url\": \"/group-task\"\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 880,
        "wires": [
            [
                "4e72953e6fef1709"
            ]
        ]
    },
    {
        "id": "7a64b776fd5a10ba",
        "type": "change",
        "z": "6ac2c89ac21b5d77",
        "name": "SetUserTaskMsg",
        "rules": [
            {
                "t": "set",
                "p": "notif",
                "pt": "msg",
                "to": "{\t    \"message\": \"You got a single task.\",\t    \"url\": \"/task\"\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 960,
        "wires": [
            [
                "4e72953e6fef1709"
            ]
        ]
    },
    {
        "id": "cadc755c15a6136d",
        "type": "http request",
        "z": "6ac2c89ac21b5d77",
        "name": "CallSendMailNotif",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://nodered.documgt.com/send-notif-email",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 790,
        "y": 960,
        "wires": [
            [
                "c8ca9a538f944fcf"
            ]
        ]
    },
    {
        "id": "aeabba7bccfdce13",
        "type": "postgresql",
        "z": "6ac2c89ac21b5d77",
        "name": "InsertCloseStatus",
        "query": "INSERT INTO public.task_detail_status\n(id, task_detail_id, notes, status,\ncreated_at, created_by, updated_at, updated_by)\nVALUES('{{ msg.uuid }}', '{{ msg.taskdetail.id }}', CONCAT('{{ msg.req.body.action }}', ' - ', '{{ msg.req.body.notes }}'), 'CLOSED',\nCURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}', CURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 590,
        "y": 580,
        "wires": [
            [
                "899c5ea9a540cdd7"
            ]
        ]
    },
    {
        "id": "19a37335a64d858e",
        "type": "http request",
        "z": "6ac2c89ac21b5d77",
        "name": "CallDocumentSigning",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://admin.documgt.com/document-revision/sign?documentRevisionId={{{payload.id}}}&userId={{{req.body.user_id}}}",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1220,
        "y": 620,
        "wires": [
            [
                "815431473724a436",
                "5817534deab292f1"
            ]
        ]
    },
    {
        "id": "63fbe7bff88cc978",
        "type": "postgresql",
        "z": "6ac2c89ac21b5d77",
        "name": "GetDocRevID",
        "query": "SELECT id\nFROM document_revision dr \nWHERE document_content_header_id = (\n    SELECT content_id \n    FROM task_header th \n    WHERE id = '{{ msg.req.body.task_header_id }}')\nORDER BY created_at DESC LIMIT 1",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1000,
        "y": 620,
        "wires": [
            [
                "19a37335a64d858e"
            ]
        ]
    },
    {
        "id": "899c5ea9a540cdd7",
        "type": "switch",
        "z": "6ac2c89ac21b5d77",
        "name": "CheckTarget",
        "property": "taskdetail.target",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "GROUP",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 790,
        "y": 580,
        "wires": [
            [
                "815431473724a436"
            ],
            [
                "63fbe7bff88cc978"
            ]
        ]
    },
    {
        "id": "cc451acb32c92693",
        "type": "link in",
        "z": "6ac2c89ac21b5d77",
        "name": "SignFlowIn",
        "links": [
            "815431473724a436"
        ],
        "x": 665,
        "y": 460,
        "wires": [
            [
                "ddb038c956e28ddd"
            ]
        ]
    },
    {
        "id": "815431473724a436",
        "type": "link out",
        "z": "6ac2c89ac21b5d77",
        "name": "SignFlowOut",
        "mode": "link",
        "links": [
            "cc451acb32c92693"
        ],
        "x": 1375,
        "y": 580,
        "wires": []
    },
    {
        "id": "5817534deab292f1",
        "type": "debug",
        "z": "6ac2c89ac21b5d77",
        "name": "debugDocSign",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1460,
        "y": 620,
        "wires": []
    },
    {
        "id": "f2423b3093a477b0",
        "type": "Number",
        "z": "7b1a86285ed2955f",
        "name": "GenRandomNum",
        "minimum": "0",
        "maximum": "9",
        "roundTo": "0",
        "Floor": true,
        "x": 130,
        "y": 740,
        "wires": [
            [
                "a3d38bb5f72f9ab1"
            ]
        ]
    },
    {
        "id": "a3d38bb5f72f9ab1",
        "type": "change",
        "z": "7b1a86285ed2955f",
        "name": "GetRandomNum",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "random",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 740,
        "wires": [
            [
                "34d6b69cc2cade56"
            ]
        ]
    },
    {
        "id": "34d6b69cc2cade56",
        "type": "UUID",
        "z": "7b1a86285ed2955f",
        "name": "GenUUID",
        "format": "Hex",
        "x": 580,
        "y": 740,
        "wires": [
            [
                "b879bd8e15b41977"
            ]
        ]
    },
    {
        "id": "b879bd8e15b41977",
        "type": "change",
        "z": "7b1a86285ed2955f",
        "name": "ReplaceDashToRandomNum",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "-",
                "fromt": "str",
                "to": "random",
                "tot": "str"
            },
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "uuid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 740,
        "wires": [
            []
        ]
    },
    {
        "id": "bbb8d83b0e60574d",
        "type": "Number",
        "z": "7b1a86285ed2955f",
        "name": "GenRandomNum",
        "minimum": "0",
        "maximum": "9",
        "roundTo": "0",
        "Floor": true,
        "x": 190,
        "y": 40,
        "wires": [
            [
                "5f18f8c9aaa35ba2"
            ]
        ]
    },
    {
        "id": "5f18f8c9aaa35ba2",
        "type": "change",
        "z": "7b1a86285ed2955f",
        "name": "GetRandomNum",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "random",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 410,
        "y": 40,
        "wires": [
            [
                "8e9d341f698c7dc7"
            ]
        ]
    },
    {
        "id": "8e9d341f698c7dc7",
        "type": "UUID",
        "z": "7b1a86285ed2955f",
        "name": "GenUUID",
        "format": "Hex",
        "x": 600,
        "y": 40,
        "wires": [
            [
                "2dff49f5fb6d342d"
            ]
        ]
    },
    {
        "id": "2dff49f5fb6d342d",
        "type": "change",
        "z": "7b1a86285ed2955f",
        "name": "ChangeDashToRandNum",
        "rules": [
            {
                "t": "change",
                "p": "payload",
                "pt": "msg",
                "from": "-",
                "fromt": "str",
                "to": "random",
                "tot": "msg"
            },
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "uuid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "c83f1befc013cfaf",
        "type": "postgresql",
        "z": "358efc91a2a58551",
        "name": "InsertNewStatus",
        "query": "INSERT INTO public.task_header_status\n(id, task_header_id, status, notes, \ncreated_at, created_by, updated_at, updated_by)\nVALUES('{{ msg.uuid }}', '{{ msg.req.body.task_header_id }}', 'NEW', '{{ msg.req.body.notes }}', \nCURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}', CURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 560,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "f2538c1cc094b6c8",
        "type": "subflow:7b1a86285ed2955f",
        "z": "358efc91a2a58551",
        "name": "",
        "x": 170,
        "y": 140,
        "wires": [
            [
                "e65b308056d2eecd"
            ]
        ]
    },
    {
        "id": "e65b308056d2eecd",
        "type": "switch",
        "z": "358efc91a2a58551",
        "name": "CheckAction",
        "property": "msg.req.body.action",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CREATE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCEL",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "APPROVE",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REJECT",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SIGNING",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "REVISE",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 6,
        "x": 350,
        "y": 140,
        "wires": [
            [
                "c83f1befc013cfaf"
            ],
            [
                "125ee9ba5f3a3aae"
            ],
            [
                "9da4fe70d71c930c"
            ],
            [
                "9da4fe70d71c930c"
            ],
            [
                "9da4fe70d71c930c"
            ],
            [
                "b1cd3d7f186fa7d5"
            ]
        ]
    },
    {
        "id": "125ee9ba5f3a3aae",
        "type": "postgresql",
        "z": "358efc91a2a58551",
        "name": "InsertCanceledStatus",
        "query": "INSERT INTO public.task_header_status\n(id, task_header_id, status, notes, \ncreated_at, created_by, updated_at, updated_by)\nVALUES('{{ msg.uuid }}', '{{ msg.req.body.task_header_id }}', 'CANCELED', '{{ msg.req.body.notes }}', \nCURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}', CURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "9da4fe70d71c930c",
        "type": "postgresql",
        "z": "358efc91a2a58551",
        "name": "InsertClosedStatus",
        "query": "INSERT INTO public.task_header_status\n(id, task_header_id, status, notes, \ncreated_at, created_by, updated_at, updated_by)\nVALUES('{{ msg.uuid }}', '{{ msg.req.body.task_header_id }}', 'CLOSED', CONCAT('{{ msg.req.body.action }}', ' - ', '{{ msg.req.body.notes }}'),\nCURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}', CURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 570,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "b1cd3d7f186fa7d5",
        "type": "postgresql",
        "z": "358efc91a2a58551",
        "name": "InsertRevisedStatus",
        "query": "INSERT INTO public.task_header_status\n(id, task_header_id, status, notes, \ncreated_at, created_by, updated_at, updated_by)\nVALUES('{{ msg.uuid }}', '{{ msg.req.body.task_header_id }}', 'ON HOLD', CONCAT('{{ msg.req.body.action }}', ' - ', '{{ msg.req.body.notes }}'),\nCURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}', CURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 580,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "0f0a8c3d1de1243e",
        "type": "postgresql",
        "z": "4627e66fbd3c569a",
        "name": "GetTaskByID",
        "query": "SELECT t.*, ts.notes, ts.status\nFROM task_header t\nLEFT JOIN (\n  SELECT DISTINCT ON (task_header_id) task_header_id, notes, status\n  FROM task_header_status\n  ORDER BY task_header_id, created_at DESC\n) ts ON ts.task_header_id = t.id\nWHERE t.id = '{{ msg.req.body.task_header_id }}';",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 170,
        "y": 100,
        "wires": [
            [
                "efc49c51e864fd26",
                "2268471af19b94f4"
            ]
        ]
    },
    {
        "id": "efc49c51e864fd26",
        "type": "switch",
        "z": "4627e66fbd3c569a",
        "name": "CheckTaskExist",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 200,
        "y": 160,
        "wires": [
            [
                "a494243d6ac03c6a"
            ],
            [
                "18de40347e5a5129"
            ]
        ]
    },
    {
        "id": "aab92c7109e9f391",
        "type": "http response",
        "z": "4627e66fbd3c569a",
        "name": "TaskNotFoundResp",
        "statusCode": "400",
        "headers": {},
        "x": 570,
        "y": 100,
        "wires": []
    },
    {
        "id": "a494243d6ac03c6a",
        "type": "change",
        "z": "4627e66fbd3c569a",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task Not Found\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 380,
        "y": 100,
        "wires": [
            [
                "aab92c7109e9f391"
            ]
        ]
    },
    {
        "id": "18de40347e5a5129",
        "type": "switch",
        "z": "4627e66fbd3c569a",
        "name": "CheckTaskClosed",
        "property": "payload.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "CLOSED",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CANCELED",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 410,
        "y": 200,
        "wires": [
            [
                "b11200f28c020b81"
            ],
            [
                "c360b616921db25c"
            ],
            []
        ]
    },
    {
        "id": "c4b187d75d3fc60b",
        "type": "http response",
        "z": "4627e66fbd3c569a",
        "name": "TaskClosedCanceledResp",
        "statusCode": "400",
        "headers": {},
        "x": 820,
        "y": 180,
        "wires": []
    },
    {
        "id": "b11200f28c020b81",
        "type": "change",
        "z": "4627e66fbd3c569a",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task Already Closed\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 160,
        "wires": [
            [
                "c4b187d75d3fc60b"
            ]
        ]
    },
    {
        "id": "2268471af19b94f4",
        "type": "debug",
        "z": "4627e66fbd3c569a",
        "name": "debugGetTaskHeader",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 40,
        "wires": []
    },
    {
        "id": "c360b616921db25c",
        "type": "change",
        "z": "4627e66fbd3c569a",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task Already Canceled\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 600,
        "y": 200,
        "wires": [
            [
                "c4b187d75d3fc60b"
            ]
        ]
    },
    {
        "id": "ea45f231c5314dfe",
        "type": "subflow:4627e66fbd3c569a",
        "z": "234349e975e02b24",
        "name": "",
        "x": 200,
        "y": 40,
        "wires": [
            [
                "ba2487d5269a7e0f"
            ]
        ]
    },
    {
        "id": "9af93a24de07db5d",
        "type": "switch",
        "z": "234349e975e02b24",
        "name": "CheckTaskHeadStatus",
        "property": "taskheader.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "eq",
                "v": "ON HOLD",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 200,
        "y": 180,
        "wires": [
            [
                "0f5a5351b5f873d4"
            ],
            [
                "9c724a25cf0f0118"
            ],
            [
                "b610e7d605f0a801"
            ]
        ]
    },
    {
        "id": "0f5a5351b5f873d4",
        "type": "subflow:358efc91a2a58551",
        "z": "234349e975e02b24",
        "name": "",
        "x": 510,
        "y": 80,
        "wires": [
            [
                "2548854abd5452c1"
            ]
        ]
    },
    {
        "id": "1df8ba88c407bd9a",
        "type": "subflow:6ac2c89ac21b5d77",
        "z": "234349e975e02b24",
        "name": "",
        "x": 660,
        "y": 320,
        "wires": [
            [
                "50cb12ad636ffad3"
            ]
        ]
    },
    {
        "id": "4af11025292a1123",
        "type": "switch",
        "z": "234349e975e02b24",
        "name": "CheckTaskDetailStatus",
        "property": "taskdetail.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 410,
        "y": 340,
        "wires": [
            [
                "1df8ba88c407bd9a"
            ],
            [
                "50cb12ad636ffad3"
            ]
        ]
    },
    {
        "id": "9ff19c5eba8dd6a8",
        "type": "join",
        "z": "234349e975e02b24",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 1210,
        "y": 340,
        "wires": [
            []
        ]
    },
    {
        "id": "96805e5c6c5f4ba2",
        "type": "change",
        "z": "234349e975e02b24",
        "name": "SetTaskDetail",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "taskdetail",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 180,
        "y": 340,
        "wires": [
            [
                "4af11025292a1123"
            ]
        ]
    },
    {
        "id": "b610e7d605f0a801",
        "type": "postgresql",
        "z": "234349e975e02b24",
        "name": "GetAllTaskDetail",
        "query": "SELECT t.*, ts.notes, ts.status\nFROM task_detail t\nLEFT JOIN (\n  SELECT DISTINCT ON (task_detail_id) task_detail_id, notes, status\n  FROM task_detail_status\n  ORDER BY task_detail_id, created_at DESC\n) ts ON ts.task_detail_id = t.id\nWHERE t.task_header_id = '{{ msg.req.body.task_header_id }}'\nAND t.task_parent_id IS NULL",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": "1",
        "outputs": 1,
        "x": 480,
        "y": 200,
        "wires": [
            [
                "3f767256d675205f",
                "a69b7364f309e9cc"
            ]
        ]
    },
    {
        "id": "3f767256d675205f",
        "type": "switch",
        "z": "234349e975e02b24",
        "name": "CheckTaskDetails",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 730,
        "y": 240,
        "wires": [
            [
                "50cb12ad636ffad3"
            ],
            [
                "96805e5c6c5f4ba2"
            ]
        ]
    },
    {
        "id": "a69b7364f309e9cc",
        "type": "debug",
        "z": "234349e975e02b24",
        "name": "debugGetAllTaskDetail",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 200,
        "wires": []
    },
    {
        "id": "50cb12ad636ffad3",
        "type": "change",
        "z": "234349e975e02b24",
        "name": "NextRow",
        "rules": [
            {
                "t": "set",
                "p": "tick",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1060,
        "y": 340,
        "wires": [
            [
                "9ff19c5eba8dd6a8",
                "4a35145769718fd9"
            ]
        ]
    },
    {
        "id": "4a35145769718fd9",
        "type": "link out",
        "z": "234349e975e02b24",
        "name": "NextRowOut",
        "mode": "link",
        "links": [
            "63b0367d24744dfc"
        ],
        "x": 1175,
        "y": 300,
        "wires": []
    },
    {
        "id": "63b0367d24744dfc",
        "type": "link in",
        "z": "234349e975e02b24",
        "name": "NextIn",
        "links": [
            "2548854abd5452c1",
            "4a35145769718fd9",
            "1d5f08f7355c159b"
        ],
        "x": 345,
        "y": 240,
        "wires": [
            [
                "b610e7d605f0a801"
            ]
        ]
    },
    {
        "id": "2548854abd5452c1",
        "type": "link out",
        "z": "234349e975e02b24",
        "name": "NextStepOut",
        "mode": "link",
        "links": [
            "63b0367d24744dfc"
        ],
        "x": 675,
        "y": 80,
        "wires": []
    },
    {
        "id": "9c724a25cf0f0118",
        "type": "postgresql",
        "z": "234349e975e02b24",
        "name": "DeleteTaskDetailStatus",
        "query": "DELETE FROM task_detail_status tds \nWHERE tds.task_detail_id IN \n(\n    SELECT id \n    FROM task_detail td \n    WHERE td.task_header_id = '{{ msg.req.body.task_header_id }}'\n);\n\nDELETE FROM task_detail td\nWHERE td.task_header_id = '{{ msg.req.body.task_header_id }}'\nAND td.level = 0;",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 510,
        "y": 140,
        "wires": [
            [
                "3d1557f907609a56"
            ]
        ]
    },
    {
        "id": "c738530de5a3984f",
        "type": "postgresql",
        "z": "234349e975e02b24",
        "name": "InsertOngoingStatus",
        "query": "INSERT INTO public.task_header_status\n(id, task_header_id, status, notes, \ncreated_at, created_by, updated_at, updated_by)\nVALUES('{{ msg.uuid }}', '{{ msg.req.body.task_header_id }}', 'ONGOING', '{{ msg.taskheader.notes }}', \nCURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}', CURRENT_TIMESTAMP, '{{ msg.req.body.user_id }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 940,
        "y": 140,
        "wires": [
            [
                "1d5f08f7355c159b"
            ]
        ]
    },
    {
        "id": "3d1557f907609a56",
        "type": "subflow:7b1a86285ed2955f",
        "z": "234349e975e02b24",
        "name": "",
        "x": 730,
        "y": 140,
        "wires": [
            [
                "c738530de5a3984f"
            ]
        ]
    },
    {
        "id": "1d5f08f7355c159b",
        "type": "link out",
        "z": "234349e975e02b24",
        "name": "NextStepOut",
        "mode": "link",
        "links": [
            "63b0367d24744dfc"
        ],
        "x": 1095,
        "y": 140,
        "wires": []
    },
    {
        "id": "ba2487d5269a7e0f",
        "type": "change",
        "z": "234349e975e02b24",
        "name": "SetTaskHeader",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "taskheader",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 180,
        "y": 100,
        "wires": [
            [
                "9af93a24de07db5d"
            ]
        ]
    },
    {
        "id": "a955cfac3db67d30",
        "type": "change",
        "z": "275009fa4a3f0b95",
        "name": "SetNotifPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t    \"sender_id\": $boolean(msg.notif.sender_id) ? msg.sender_id : null,\t    \"sender_name\": msg.notif.sender_name,\t    \"recipient_id\": msg.payload.id,\t    \"recipient_name\": msg.payload.user_name,\t    \"message\": msg.message,\t    \"url\": msg.url,\t    \"content_type\": msg.content_type,\t    \"content_id\": msg.content_id\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1100,
        "y": 120,
        "wires": [
            [
                "6f2b31161476caf4",
                "ab9ca7327643fe09"
            ]
        ]
    },
    {
        "id": "6f2b31161476caf4",
        "type": "debug",
        "z": "275009fa4a3f0b95",
        "name": "DebugPostNotification",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1320,
        "y": 160,
        "wires": []
    },
    {
        "id": "ba7fbb3be855e3b9",
        "type": "switch",
        "z": "275009fa4a3f0b95",
        "name": "CheckRecipientType",
        "property": "notif.recipient_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "GROUP",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 380,
        "y": 180,
        "wires": [
            [
                "6d76f9e5373fcb5a"
            ],
            [
                "66bcc124e3ccba4e",
                "ea8d27b8c900074c"
            ]
        ]
    },
    {
        "id": "6d76f9e5373fcb5a",
        "type": "postgresql",
        "z": "275009fa4a3f0b95",
        "name": "GetAllUserFromGroup",
        "query": "SELECT u.id, u.user_name\nFROM users u\nWHERE u.user_group_id = '{{ msg.recepient_id }}'",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 680,
        "y": 100,
        "wires": [
            [
                "30214a7927ec044f"
            ]
        ]
    },
    {
        "id": "dc42e7aef1b42161",
        "type": "change",
        "z": "275009fa4a3f0b95",
        "name": "NextRow",
        "rules": [
            {
                "t": "set",
                "p": "tick",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1440,
        "y": 80,
        "wires": [
            [
                "1f212b9e1e7ac968",
                "dd3109f25e1e8fa4"
            ]
        ]
    },
    {
        "id": "1f212b9e1e7ac968",
        "type": "link out",
        "z": "275009fa4a3f0b95",
        "name": "NextRowOut",
        "mode": "link",
        "links": [
            "ce908c21fd14e780"
        ],
        "x": 1555,
        "y": 40,
        "wires": []
    },
    {
        "id": "ce908c21fd14e780",
        "type": "link in",
        "z": "275009fa4a3f0b95",
        "name": "NextRowIn",
        "links": [
            "1f212b9e1e7ac968"
        ],
        "x": 535,
        "y": 60,
        "wires": [
            [
                "6d76f9e5373fcb5a"
            ]
        ]
    },
    {
        "id": "ea8d27b8c900074c",
        "type": "debug",
        "z": "275009fa4a3f0b95",
        "name": "DebugPostNotification",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "notif",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 240,
        "wires": []
    },
    {
        "id": "dd3109f25e1e8fa4",
        "type": "join",
        "z": "275009fa4a3f0b95",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 1590,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "30214a7927ec044f",
        "type": "switch",
        "z": "275009fa4a3f0b95",
        "name": "CheckPayload",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 900,
        "y": 100,
        "wires": [
            [
                "dc42e7aef1b42161"
            ],
            [
                "a955cfac3db67d30"
            ]
        ]
    },
    {
        "id": "3dc527e877f58308",
        "type": "postgresql",
        "z": "275009fa4a3f0b95",
        "name": "GetUser",
        "query": "SELECT u.user_name\nFROM users u \nWHERE u.id = '{{ msg.notif.sender_id }}'",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 160,
        "y": 120,
        "wires": [
            [
                "6698d7d4608e879e",
                "9ba6ca01060ae231"
            ]
        ]
    },
    {
        "id": "6698d7d4608e879e",
        "type": "switch",
        "z": "275009fa4a3f0b95",
        "name": "CheckPayload",
        "property": "payload.user_name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 360,
        "y": 120,
        "wires": [
            [
                "f31ac6c85883fac8"
            ],
            [
                "15db8defc577f6c7"
            ]
        ]
    },
    {
        "id": "15db8defc577f6c7",
        "type": "change",
        "z": "275009fa4a3f0b95",
        "name": "SetSenderName",
        "rules": [
            {
                "t": "set",
                "p": "notif.sender_name",
                "pt": "msg",
                "to": "payload.user_name",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 130,
        "y": 180,
        "wires": [
            [
                "ba7fbb3be855e3b9",
                "9a62eb36fdb074a7"
            ]
        ]
    },
    {
        "id": "f31ac6c85883fac8",
        "type": "link out",
        "z": "275009fa4a3f0b95",
        "name": "SenderNotFoundOut",
        "mode": "link",
        "links": [
            "813f678849c185e4"
        ],
        "x": 485,
        "y": 80,
        "wires": []
    },
    {
        "id": "813f678849c185e4",
        "type": "link in",
        "z": "275009fa4a3f0b95",
        "name": "SenderNotFoundIn",
        "links": [
            "f31ac6c85883fac8"
        ],
        "x": 1655,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "66bcc124e3ccba4e",
        "type": "subflow:fab08bae4898c2d1",
        "z": "275009fa4a3f0b95",
        "name": "",
        "x": 640,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "ab9ca7327643fe09",
        "type": "subflow:fab08bae4898c2d1",
        "z": "275009fa4a3f0b95",
        "name": "",
        "x": 1280,
        "y": 120,
        "wires": [
            [
                "dc42e7aef1b42161"
            ]
        ]
    },
    {
        "id": "9ba6ca01060ae231",
        "type": "debug",
        "z": "275009fa4a3f0b95",
        "name": "debugUser",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 80,
        "wires": []
    },
    {
        "id": "9a62eb36fdb074a7",
        "type": "debug",
        "z": "275009fa4a3f0b95",
        "name": "debugNotif",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "notif",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 350,
        "y": 220,
        "wires": []
    },
    {
        "id": "202d691da72d6d85",
        "type": "postgresql",
        "z": "fab08bae4898c2d1",
        "name": "InsertToDB",
        "query": "INSERT INTO public.notification\n(id, created_by, updated_by, \nsender_id, url, recipient_id, \ncontent_id, content_type, message)\nVALUES('{{ msg.uuid }}', '{{ msg.notif.sender_id }}', '{{ msg.notif.sender_id }}',\n'{{ msg.notif.sender_id }}', '{{ msg.notif.url }}', NULL,\n'{{ msg.notif.content_id }}', '{{ msg.notif.content_type }}', '{{ msg.notif.message }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 530,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "6d885400db7f812d",
        "type": "redis-command",
        "z": "fab08bae4898c2d1",
        "server": "a0efbb89.5e42d8",
        "command": "GET",
        "name": "GetUserSession",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 700,
        "y": 240,
        "wires": [
            [
                "c40d1e43bad1f431",
                "29141b6ae589e706"
            ]
        ]
    },
    {
        "id": "c40d1e43bad1f431",
        "type": "change",
        "z": "fab08bae4898c2d1",
        "name": "SetSession",
        "rules": [
            {
                "t": "set",
                "p": "_session",
                "pt": "msg",
                "to": "{\t    \"type\": \"websocket\",\t    \"id\": msg.payload\t}",
                "tot": "jsonata"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "notif",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 910,
        "y": 240,
        "wires": [
            [
                "dce753b8d5436006"
            ]
        ]
    },
    {
        "id": "dce753b8d5436006",
        "type": "websocket out",
        "z": "fab08bae4898c2d1",
        "name": "WsSendNotif",
        "server": "fc9d711d29453f24",
        "client": "",
        "x": 1110,
        "y": 80,
        "wires": []
    },
    {
        "id": "29141b6ae589e706",
        "type": "debug",
        "z": "fab08bae4898c2d1",
        "name": "DebugUserSession",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 280,
        "wires": []
    },
    {
        "id": "f2989fd91cc0301f",
        "type": "switch",
        "z": "fab08bae4898c2d1",
        "name": "CheckRecepient",
        "property": "notif.recipient_id",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "ALL",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 300,
        "y": 160,
        "wires": [
            [
                "202d691da72d6d85",
                "7b5937a03aed1683"
            ],
            [
                "02d44a34be0ad531",
                "03f9b1c3c38eaa89"
            ]
        ]
    },
    {
        "id": "9494cb50cd7f275d",
        "type": "debug",
        "z": "fab08bae4898c2d1",
        "name": "DebugSession",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 740,
        "y": 40,
        "wires": []
    },
    {
        "id": "7b5937a03aed1683",
        "type": "change",
        "z": "fab08bae4898c2d1",
        "name": "DeleteSession",
        "rules": [
            {
                "t": "delete",
                "p": "_session",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "notif",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 80,
        "wires": [
            [
                "dce753b8d5436006",
                "9494cb50cd7f275d"
            ]
        ]
    },
    {
        "id": "02d44a34be0ad531",
        "type": "postgresql",
        "z": "fab08bae4898c2d1",
        "name": "InsertToDB",
        "query": "INSERT INTO public.notification\n(id, created_by, updated_by, \nsender_id, url, recipient_id, \ncontent_id, content_type, message)\nVALUES('{{ msg.uuid }}', '{{ msg.notif.sender_id }}', '{{ msg.notif.sender_id }}',\n'{{ msg.notif.sender_id }}', '{{ msg.notif.url }}', '{{ msg.notif.recipient_id }}',\n'{{ msg.notif.content_id }}', '{{ msg.notif.content_type }}', '{{ msg.notif.message }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 530,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "03f9b1c3c38eaa89",
        "type": "change",
        "z": "fab08bae4898c2d1",
        "name": "SetTopic",
        "rules": [
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "notif.recipient_id",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[]",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 240,
        "wires": [
            [
                "6d885400db7f812d"
            ]
        ]
    },
    {
        "id": "7c844c7a1373614c",
        "type": "subflow:7b1a86285ed2955f",
        "z": "fab08bae4898c2d1",
        "name": "",
        "x": 210,
        "y": 80,
        "wires": [
            [
                "6a78f256ec051ea1"
            ]
        ]
    },
    {
        "id": "6a78f256ec051ea1",
        "type": "change",
        "z": "fab08bae4898c2d1",
        "name": "SetNotifId",
        "rules": [
            {
                "t": "set",
                "p": "notif.id",
                "pt": "msg",
                "to": "uuid",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 120,
        "y": 160,
        "wires": [
            [
                "f2989fd91cc0301f"
            ]
        ]
    },
    {
        "id": "1380a5f713d1918d",
        "type": "switch",
        "z": "69c323403e853b7c",
        "name": "TestDBConn",
        "property": "msg.req.body.task_header_id != \"\" and \tmsg.req.body.task_detail_id = \"\" and\tmsg.req.body.action = \"TEST\"",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 210,
        "y": 140,
        "wires": [
            [
                "b221d13c0a41fc92"
            ]
        ]
    },
    {
        "id": "b221d13c0a41fc92",
        "type": "postgresql",
        "z": "69c323403e853b7c",
        "name": "CheckTaskHeader",
        "query": "SELECT * FROM task_header\nWHERE id = '{{ msg.req.body.task_header_id }}';",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 430,
        "y": 140,
        "wires": [
            [
                "2f636d96aafc6350",
                "b1933a50d782ef2c"
            ]
        ]
    },
    {
        "id": "2f636d96aafc6350",
        "type": "switch",
        "z": "69c323403e853b7c",
        "name": "IsExist?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 640,
        "y": 140,
        "wires": [
            [
                "7c083ad46dd16b25"
            ],
            [
                "3b40dd7f61607867"
            ]
        ]
    },
    {
        "id": "b1933a50d782ef2c",
        "type": "debug",
        "z": "69c323403e853b7c",
        "name": "debugDBConnection",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 80,
        "wires": []
    },
    {
        "id": "7c083ad46dd16b25",
        "type": "change",
        "z": "69c323403e853b7c",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task Header ID is valid\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 120,
        "wires": [
            [
                "d3bcb928f6350234"
            ]
        ]
    },
    {
        "id": "3b40dd7f61607867",
        "type": "change",
        "z": "69c323403e853b7c",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task Header ID is invalid\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 160,
        "wires": [
            [
                "db48b1024953cba8"
            ]
        ]
    },
    {
        "id": "d3bcb928f6350234",
        "type": "http response",
        "z": "69c323403e853b7c",
        "name": "SuccessResp",
        "statusCode": "200",
        "headers": {},
        "x": 1020,
        "y": 120,
        "wires": []
    },
    {
        "id": "db48b1024953cba8",
        "type": "http response",
        "z": "69c323403e853b7c",
        "name": "ErrorResp",
        "statusCode": "400",
        "headers": {},
        "x": 1010,
        "y": 160,
        "wires": []
    },
    {
        "id": "63b917394ccbe50b",
        "type": "subflow:386204d4507e3dd9",
        "z": "07a98254aae31037",
        "name": "",
        "x": 730,
        "y": 80,
        "wires": [
            [
                "234d2456f51f2bcb"
            ]
        ]
    },
    {
        "id": "20c103cf66d67391",
        "type": "switch",
        "z": "07a98254aae31037",
        "name": "ApproveTaskDetail",
        "property": "msg.req.body.task_header_id != \"\" and \tmsg.req.body.task_detail_id != \"\" and \tmsg.req.body.user_id != \"\"",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 510,
        "y": 120,
        "wires": [
            [
                "63b917394ccbe50b"
            ],
            [
                "76c925b42a8a32af"
            ]
        ]
    },
    {
        "id": "234d2456f51f2bcb",
        "type": "http response",
        "z": "07a98254aae31037",
        "name": "ApproveResp",
        "statusCode": "200",
        "headers": {},
        "x": 940,
        "y": 80,
        "wires": []
    },
    {
        "id": "527a06f6f1f7854f",
        "type": "http in",
        "z": "07a98254aae31037",
        "name": "ApproveReq",
        "url": "/review-approve",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "e5ad0960bad2b335"
            ]
        ]
    },
    {
        "id": "1297a1fc4c7c5b43",
        "type": "debug",
        "z": "07a98254aae31037",
        "name": "debugRequest",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 500,
        "y": 80,
        "wires": []
    },
    {
        "id": "e5ad0960bad2b335",
        "type": "change",
        "z": "07a98254aae31037",
        "name": "SetAction",
        "rules": [
            {
                "t": "set",
                "p": "req.body.action",
                "pt": "msg",
                "to": "APPROVE",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 300,
        "y": 120,
        "wires": [
            [
                "20c103cf66d67391",
                "1297a1fc4c7c5b43"
            ]
        ]
    },
    {
        "id": "76c925b42a8a32af",
        "type": "change",
        "z": "07a98254aae31037",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task IDs and User ID cannot be empty\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 160,
        "wires": [
            [
                "9cc4de0fc664ddc5"
            ]
        ]
    },
    {
        "id": "9cc4de0fc664ddc5",
        "type": "http response",
        "z": "07a98254aae31037",
        "name": "ErrorResp",
        "statusCode": "400",
        "headers": {},
        "x": 930,
        "y": 160,
        "wires": []
    },
    {
        "id": "6a06f5ebc6232a50",
        "type": "tab",
        "label": "Clean Idle Connections"
    },
    {
        "id": "41c0943c35e912ee",
        "type": "inject",
        "z": "6a06f5ebc6232a50",
        "name": "InjectEvery5Minutes",
        "props": [],
        "repeat": "300",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "39dd8c6f19355c93"
            ]
        ]
    },
    {
        "id": "ebf1508f13ec5cef",
        "type": "debug",
        "z": "6a06f5ebc6232a50",
        "name": "DebugResult",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 670,
        "y": 140,
        "wires": []
    },
    {
        "id": "39dd8c6f19355c93",
        "type": "postgresql",
        "z": "6a06f5ebc6232a50",
        "name": "TerminateIdleConnection",
        "query": "SELECT pg_terminate_backend(pid) \nFROM pg_stat_activity \nWHERE usename = 'nodered'\nAND state = 'idle'\nAND pid <> pg_backend_pid();",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 430,
        "y": 140,
        "wires": [
            [
                "ebf1508f13ec5cef"
            ]
        ]
    },
    {
        "id": "e6be1cdc78497d7a",
        "type": "tab",
        "label": "Testing"
    },
    {
        "id": "86444864ac408340",
        "type": "tab",
        "label": "Revise Review"
    },
    {
        "id": "e608f9eb1609bbea",
        "type": "http in",
        "z": "86444864ac408340",
        "name": "ReviseReq",
        "url": "/review-revise",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 120,
        "wires": [
            [
                "f087e088db60d8b1"
            ]
        ]
    },
    {
        "id": "d0d342a76d3d7cbf",
        "type": "switch",
        "z": "86444864ac408340",
        "name": "ReviseTaskDetail",
        "property": "msg.req.body.task_header_id != \"\" and \tmsg.req.body.task_detail_id != \"\" and \tmsg.req.body.user_id != \"\"",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 120,
        "wires": [
            [
                "5fe8bf5352a4be32"
            ],
            [
                "76c925b42a8a32af"
            ]
        ]
    },
    {
        "id": "5fe8bf5352a4be32",
        "type": "subflow:386204d4507e3dd9",
        "z": "86444864ac408340",
        "name": "",
        "x": 710,
        "y": 80,
        "wires": [
            [
                "fa95cc44cb194d80"
            ]
        ]
    },
    {
        "id": "fa95cc44cb194d80",
        "type": "http response",
        "z": "86444864ac408340",
        "name": "ReviseResp",
        "statusCode": "200",
        "headers": {},
        "x": 910,
        "y": 80,
        "wires": []
    },
    {
        "id": "a3b45a90cfa7870f",
        "type": "debug",
        "z": "86444864ac408340",
        "name": "debugRequest",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 80,
        "wires": []
    },
    {
        "id": "f087e088db60d8b1",
        "type": "change",
        "z": "86444864ac408340",
        "name": "SetAction",
        "rules": [
            {
                "t": "set",
                "p": "req.body.action",
                "pt": "msg",
                "to": "REVISE",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 120,
        "wires": [
            [
                "d0d342a76d3d7cbf",
                "a3b45a90cfa7870f"
            ]
        ]
    },
    {
        "id": "76c925b42a8a32af",
        "type": "change",
        "z": "86444864ac408340",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task IDs and User ID cannot be empty\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 160,
        "wires": [
            [
                "9cc4de0fc664ddc5"
            ]
        ]
    },
    {
        "id": "9cc4de0fc664ddc5",
        "type": "http response",
        "z": "86444864ac408340",
        "name": "ErrorResp",
        "statusCode": "400",
        "headers": {},
        "x": 910,
        "y": 160,
        "wires": []
    },
    {
        "id": "6836c72ff068958d",
        "type": "tab",
        "label": "Sign Document"
    },
    {
        "id": "20c103cf66d67391",
        "type": "switch",
        "z": "6836c72ff068958d",
        "name": "SigningContent",
        "property": "msg.req.body.task_header_id != \"\" and \tmsg.req.body.task_detail_id != \"\" and \tmsg.req.body.user_id != \"\"",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 460,
        "y": 140,
        "wires": [
            [
                "24747f75375ff1be"
            ],
            [
                "76c925b42a8a32af"
            ]
        ]
    },
    {
        "id": "234d2456f51f2bcb",
        "type": "http response",
        "z": "6836c72ff068958d",
        "name": "SigningResp",
        "statusCode": "200",
        "headers": {},
        "x": 1910,
        "y": 200,
        "wires": []
    },
    {
        "id": "527a06f6f1f7854f",
        "type": "http in",
        "z": "6836c72ff068958d",
        "name": "SigningReq",
        "url": "/signing",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "8ac66ff673c0f351"
            ]
        ]
    },
    {
        "id": "1297a1fc4c7c5b43",
        "type": "debug",
        "z": "6836c72ff068958d",
        "name": "debugRequest",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 100,
        "wires": []
    },
    {
        "id": "24747f75375ff1be",
        "type": "postgresql",
        "z": "6836c72ff068958d",
        "name": "GetTaskDetailStatus",
        "query": "SELECT t.*, ts.notes, ts.status\nFROM task_detail t\nJOIN (\n  SELECT task_detail_id, notes, status\n  FROM task_detail_status\n  WHERE task_detail_id = '{{ msg.req.body.task_detail_id }}'\n  ORDER BY created_at DESC\n  LIMIT 1\n) ts ON ts.task_detail_id = t.id;",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 700,
        "y": 100,
        "wires": [
            [
                "22b2de79f27f4dbb",
                "71ca88f4fa83a539"
            ]
        ]
    },
    {
        "id": "1fe188159ebeb798",
        "type": "switch",
        "z": "6836c72ff068958d",
        "name": "CheckStatus",
        "property": "taskdetail.status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "OWNED",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 870,
        "y": 260,
        "wires": [
            [
                "643712575cb96802"
            ],
            [
                "4f0a275bf763843a"
            ]
        ]
    },
    {
        "id": "5e073b165a3c371b",
        "type": "subflow:6ac2c89ac21b5d77",
        "z": "6836c72ff068958d",
        "name": "",
        "x": 1260,
        "y": 140,
        "wires": [
            [
                "94677d61326315c5"
            ]
        ]
    },
    {
        "id": "ef899e1485a70978",
        "type": "change",
        "z": "6836c72ff068958d",
        "name": "SetTaskDetail",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "taskdetail",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 680,
        "y": 260,
        "wires": [
            [
                "1fe188159ebeb798",
                "686d58f4fad813dc"
            ]
        ]
    },
    {
        "id": "4f0a275bf763843a",
        "type": "change",
        "z": "6836c72ff068958d",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Unable to close task because last task state was not OWNED\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1040,
        "y": 320,
        "wires": [
            [
                "43fff1d3209b5aeb"
            ]
        ]
    },
    {
        "id": "43fff1d3209b5aeb",
        "type": "http response",
        "z": "6836c72ff068958d",
        "name": "StatusErrorResp",
        "statusCode": "400",
        "headers": {},
        "x": 1220,
        "y": 320,
        "wires": []
    },
    {
        "id": "22b2de79f27f4dbb",
        "type": "switch",
        "z": "6836c72ff068958d",
        "name": "CheckTaskDetails",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 930,
        "y": 100,
        "wires": [
            [
                "83247cc79b2b6cae"
            ],
            [
                "ef899e1485a70978"
            ]
        ]
    },
    {
        "id": "83247cc79b2b6cae",
        "type": "change",
        "z": "6836c72ff068958d",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task Detail Not Found\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1140,
        "y": 80,
        "wires": [
            [
                "d996757e00535af9"
            ]
        ]
    },
    {
        "id": "d996757e00535af9",
        "type": "http response",
        "z": "6836c72ff068958d",
        "name": "TaskDetailsNotFoundResp",
        "statusCode": "400",
        "headers": {},
        "x": 1360,
        "y": 80,
        "wires": []
    },
    {
        "id": "643712575cb96802",
        "type": "switch",
        "z": "6836c72ff068958d",
        "name": "CheckTarget",
        "property": "taskdetail.target",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "USER_GROUP",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "USER",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "GROUP",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 3,
        "x": 1050,
        "y": 200,
        "wires": [
            [
                "5e073b165a3c371b"
            ],
            [
                "a4e6ce243ee26a19"
            ],
            [
                "73a78c57e0573a52"
            ]
        ]
    },
    {
        "id": "73a78c57e0573a52",
        "type": "subflow:c30450b75f88597b",
        "z": "6836c72ff068958d",
        "name": "",
        "x": 1250,
        "y": 260,
        "wires": [
            [
                "6a92760ba104b9d7"
            ]
        ]
    },
    {
        "id": "71ca88f4fa83a539",
        "type": "debug",
        "z": "6836c72ff068958d",
        "name": "DebugCloseTask",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 60,
        "wires": []
    },
    {
        "id": "a4e6ce243ee26a19",
        "type": "subflow:6ac2c89ac21b5d77",
        "z": "6836c72ff068958d",
        "name": "",
        "x": 1260,
        "y": 200,
        "wires": [
            [
                "6a92760ba104b9d7"
            ]
        ]
    },
    {
        "id": "94677d61326315c5",
        "type": "subflow:d70a9e0896099318",
        "z": "6836c72ff068958d",
        "name": "",
        "x": 1490,
        "y": 140,
        "wires": [
            [
                "6a92760ba104b9d7"
            ]
        ]
    },
    {
        "id": "6a92760ba104b9d7",
        "type": "subflow:7110576ffdc36126",
        "z": "6836c72ff068958d",
        "name": "",
        "x": 1710,
        "y": 200,
        "wires": [
            [
                "234d2456f51f2bcb"
            ]
        ]
    },
    {
        "id": "686d58f4fad813dc",
        "type": "debug",
        "z": "6836c72ff068958d",
        "name": "DebugTaskDetail",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "taskdetail",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 380,
        "wires": []
    },
    {
        "id": "8ac66ff673c0f351",
        "type": "change",
        "z": "6836c72ff068958d",
        "name": "SetAction",
        "rules": [
            {
                "t": "set",
                "p": "req.body.action",
                "pt": "msg",
                "to": "SIGNING",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 140,
        "wires": [
            [
                "20c103cf66d67391",
                "1297a1fc4c7c5b43"
            ]
        ]
    },
    {
        "id": "76c925b42a8a32af",
        "type": "change",
        "z": "6836c72ff068958d",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task IDs and User ID cannot be empty\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 200,
        "wires": [
            [
                "9cc4de0fc664ddc5"
            ]
        ]
    },
    {
        "id": "9cc4de0fc664ddc5",
        "type": "http response",
        "z": "6836c72ff068958d",
        "name": "ErrorResp",
        "statusCode": "400",
        "headers": {},
        "x": 450,
        "y": 200,
        "wires": []
    },
    {
        "id": "17fd8e94d89ab43f",
        "type": "tab",
        "label": "TEST Task"
    },
    {
        "id": "37f3280d8a43e085",
        "type": "http in",
        "z": "17fd8e94d89ab43f",
        "name": "TestTaskReq",
        "url": "/task-test",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "a728f6e144966ea6"
            ]
        ]
    },
    {
        "id": "a728f6e144966ea6",
        "type": "switch",
        "z": "17fd8e94d89ab43f",
        "name": "TestDBConn",
        "property": "msg.req.body.task_header_id != \"\" and \tmsg.req.body.task_detail_id = \"\"",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 120,
        "wires": [
            [
                "a70d0dde13231cae"
            ]
        ]
    },
    {
        "id": "a70d0dde13231cae",
        "type": "postgresql",
        "z": "17fd8e94d89ab43f",
        "name": "CheckTaskHeader",
        "query": "SELECT * FROM task_header\nWHERE id = '{{ msg.req.body.task_header_id }}';",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 530,
        "y": 120,
        "wires": [
            [
                "b57148a8cd54efee",
                "6e0c1289b68d1cc2"
            ]
        ]
    },
    {
        "id": "b57148a8cd54efee",
        "type": "switch",
        "z": "17fd8e94d89ab43f",
        "name": "IsExist?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 740,
        "y": 120,
        "wires": [
            [
                "e758fdf22bb57ccf"
            ],
            [
                "7e6f19c8d089877e"
            ]
        ]
    },
    {
        "id": "6e0c1289b68d1cc2",
        "type": "debug",
        "z": "17fd8e94d89ab43f",
        "name": "debugDBConnection",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 780,
        "y": 60,
        "wires": []
    },
    {
        "id": "e758fdf22bb57ccf",
        "type": "change",
        "z": "17fd8e94d89ab43f",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task Header ID is valid\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 100,
        "wires": [
            [
                "c51359abfe4bd26e"
            ]
        ]
    },
    {
        "id": "7e6f19c8d089877e",
        "type": "change",
        "z": "17fd8e94d89ab43f",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task Header ID is invalid\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 920,
        "y": 140,
        "wires": [
            [
                "f954f2030464a182"
            ]
        ]
    },
    {
        "id": "c51359abfe4bd26e",
        "type": "http response",
        "z": "17fd8e94d89ab43f",
        "name": "SuccessResp",
        "statusCode": "200",
        "headers": {},
        "x": 1120,
        "y": 100,
        "wires": []
    },
    {
        "id": "f954f2030464a182",
        "type": "http response",
        "z": "17fd8e94d89ab43f",
        "name": "ErrorResp",
        "statusCode": "400",
        "headers": {},
        "x": 1110,
        "y": 140,
        "wires": []
    },
    {
        "id": "363e65163be27cbd",
        "type": "tab",
        "label": "Cancel Task"
    },
    {
        "id": "13995b7f59466309",
        "type": "http in",
        "z": "363e65163be27cbd",
        "name": "CancelTaskReq",
        "url": "/task-cancel",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 160,
        "wires": [
            [
                "deca7ffdce85ad8e"
            ]
        ]
    },
    {
        "id": "d20f90449dcd5f54",
        "type": "change",
        "z": "363e65163be27cbd",
        "name": "SetPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t    \"sender_id\": \"USER01\",\t    \"recipient_type\": \"USER\",\t    \"recipient_id\": msg.req.body.user_id,\t    \"message\": msg.notif_message,\t    \"url\": \"/pending-task\",\t    \"content_type\": \"TASK\",\t    \"content_id\": msg.req.body.task_header_id\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1150,
        "y": 120,
        "wires": [
            [
                "2f3b861c0a62dbf0",
                "ce4821b1ac48a15f",
                "319a1d51a9dd95f3"
            ]
        ]
    },
    {
        "id": "2f3b861c0a62dbf0",
        "type": "http request",
        "z": "363e65163be27cbd",
        "name": "CallSendWSNotif",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://nodered.documgt.com/send-notif-ws",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1370,
        "y": 80,
        "wires": [
            [
                "319a1d51a9dd95f3"
            ]
        ]
    },
    {
        "id": "ce4821b1ac48a15f",
        "type": "http request",
        "z": "363e65163be27cbd",
        "name": "CallSendMailNotif",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://nodered.documgt.com/send-notif-email",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1370,
        "y": 160,
        "wires": [
            [
                "319a1d51a9dd95f3"
            ]
        ]
    },
    {
        "id": "319a1d51a9dd95f3",
        "type": "debug",
        "z": "363e65163be27cbd",
        "name": "debugNotifPayload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1610,
        "y": 120,
        "wires": []
    },
    {
        "id": "127c59b940022ad1",
        "type": "debug",
        "z": "363e65163be27cbd",
        "name": "debugRequest",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 120,
        "wires": []
    },
    {
        "id": "3e4114d7222a1a7a",
        "type": "http response",
        "z": "363e65163be27cbd",
        "name": "CancelTaskResp",
        "statusCode": "200",
        "headers": {},
        "x": 970,
        "y": 80,
        "wires": []
    },
    {
        "id": "e197e63fdc165770",
        "type": "switch",
        "z": "363e65163be27cbd",
        "name": "CancelTaskHeader",
        "property": "msg.req.body.task_header_id != \"\" and \tmsg.req.body.task_detail_id = \"\" and \tmsg.req.body.user_id != \"\"",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 160,
        "wires": [
            [
                "c0ea3a4a4a759808"
            ],
            [
                "76c925b42a8a32af"
            ]
        ]
    },
    {
        "id": "c0ea3a4a4a759808",
        "type": "subflow:6da56882aa07c67e",
        "z": "363e65163be27cbd",
        "name": "",
        "x": 750,
        "y": 120,
        "wires": [
            [
                "411b246dfedde894",
                "3e4114d7222a1a7a"
            ]
        ]
    },
    {
        "id": "411b246dfedde894",
        "type": "change",
        "z": "363e65163be27cbd",
        "name": "SetNotifMsg",
        "rules": [
            {
                "t": "set",
                "p": "notif_message",
                "pt": "msg",
                "to": "You have successfully canceled a task.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 950,
        "y": 120,
        "wires": [
            [
                "d20f90449dcd5f54"
            ]
        ]
    },
    {
        "id": "76c925b42a8a32af",
        "type": "change",
        "z": "363e65163be27cbd",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task IDs and User ID cannot be empty\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 200,
        "wires": [
            [
                "9cc4de0fc664ddc5"
            ]
        ]
    },
    {
        "id": "9cc4de0fc664ddc5",
        "type": "http response",
        "z": "363e65163be27cbd",
        "name": "ErrorResp",
        "statusCode": "400",
        "headers": {},
        "x": 950,
        "y": 200,
        "wires": []
    },
    {
        "id": "deca7ffdce85ad8e",
        "type": "change",
        "z": "363e65163be27cbd",
        "name": "SetAction",
        "rules": [
            {
                "t": "set",
                "p": "req.body.action",
                "pt": "msg",
                "to": "CANCEL",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 160,
        "wires": [
            [
                "e197e63fdc165770",
                "127c59b940022ad1"
            ]
        ]
    },
    {
        "id": "7097187886d0b658",
        "type": "tab",
        "label": "Release Task"
    },
    {
        "id": "be04d1274ee9d548",
        "type": "http in",
        "z": "7097187886d0b658",
        "name": "ReleaseTaskReq",
        "url": "/task-release",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "9ae8910e054c1b5a"
            ]
        ]
    },
    {
        "id": "0fa89f786f5983e1",
        "type": "switch",
        "z": "7097187886d0b658",
        "name": "ReleaseTaskDetail",
        "property": "msg.req.body.task_header_id != \"\" and \tmsg.req.body.task_detail_id != \"\" and \tmsg.req.body.user_id != \"\"",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 120,
        "wires": [
            [
                "ad8dc55c17b90be4"
            ],
            [
                "76c925b42a8a32af"
            ]
        ]
    },
    {
        "id": "ad8dc55c17b90be4",
        "type": "subflow:2fe6838fdefb8310",
        "z": "7097187886d0b658",
        "name": "",
        "x": 750,
        "y": 80,
        "wires": [
            [
                "b5da8eb65f1ed354"
            ]
        ]
    },
    {
        "id": "b5da8eb65f1ed354",
        "type": "http response",
        "z": "7097187886d0b658",
        "name": "ReleaseTaskResp",
        "statusCode": "200",
        "headers": {},
        "x": 970,
        "y": 80,
        "wires": []
    },
    {
        "id": "887b78dc3f5ba9a7",
        "type": "debug",
        "z": "7097187886d0b658",
        "name": "debugRequest",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 80,
        "wires": []
    },
    {
        "id": "76c925b42a8a32af",
        "type": "change",
        "z": "7097187886d0b658",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task IDs and User ID cannot be empty\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 160,
        "wires": [
            [
                "9cc4de0fc664ddc5"
            ]
        ]
    },
    {
        "id": "9cc4de0fc664ddc5",
        "type": "http response",
        "z": "7097187886d0b658",
        "name": "ErrorResp",
        "statusCode": "400",
        "headers": {},
        "x": 950,
        "y": 160,
        "wires": []
    },
    {
        "id": "9ae8910e054c1b5a",
        "type": "change",
        "z": "7097187886d0b658",
        "name": "SetAction",
        "rules": [
            {
                "t": "set",
                "p": "req.body.action",
                "pt": "msg",
                "to": "RELEASE",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 120,
        "wires": [
            [
                "0fa89f786f5983e1",
                "887b78dc3f5ba9a7"
            ]
        ]
    },
    {
        "id": "e6a0b49d7ec8fc22",
        "type": "tab",
        "label": "Handle Task"
    },
    {
        "id": "f9d7291975790647",
        "type": "http in",
        "z": "e6a0b49d7ec8fc22",
        "name": "HandleTaskReq",
        "url": "/task-handle",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "0f476113918649a5"
            ]
        ]
    },
    {
        "id": "1231fb53b13021c5",
        "type": "switch",
        "z": "e6a0b49d7ec8fc22",
        "name": "HandleTaskDetail",
        "property": "msg.req.body.task_header_id != \"\" and \tmsg.req.body.task_detail_id != \"\" and \tmsg.req.body.user_id != \"\"",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 530,
        "y": 120,
        "wires": [
            [
                "410fb4f437fd62d5"
            ],
            [
                "76c925b42a8a32af"
            ]
        ]
    },
    {
        "id": "410fb4f437fd62d5",
        "type": "subflow:6b8ad90223d790e1",
        "z": "e6a0b49d7ec8fc22",
        "name": "",
        "x": 750,
        "y": 80,
        "wires": [
            [
                "1b948d1173d9433d"
            ]
        ]
    },
    {
        "id": "1b948d1173d9433d",
        "type": "http response",
        "z": "e6a0b49d7ec8fc22",
        "name": "HandleTaskResp",
        "statusCode": "200",
        "headers": {},
        "x": 970,
        "y": 80,
        "wires": []
    },
    {
        "id": "5c099772d7adcee7",
        "type": "debug",
        "z": "e6a0b49d7ec8fc22",
        "name": "debugRequest",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 80,
        "wires": []
    },
    {
        "id": "76c925b42a8a32af",
        "type": "change",
        "z": "e6a0b49d7ec8fc22",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task IDs and User ID cannot be empty\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 740,
        "y": 160,
        "wires": [
            [
                "9cc4de0fc664ddc5"
            ]
        ]
    },
    {
        "id": "9cc4de0fc664ddc5",
        "type": "http response",
        "z": "e6a0b49d7ec8fc22",
        "name": "ErrorResp",
        "statusCode": "400",
        "headers": {},
        "x": 950,
        "y": 160,
        "wires": []
    },
    {
        "id": "0f476113918649a5",
        "type": "change",
        "z": "e6a0b49d7ec8fc22",
        "name": "SetAction",
        "rules": [
            {
                "t": "set",
                "p": "req.body.action",
                "pt": "msg",
                "to": "HANDLE",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 120,
        "wires": [
            [
                "1231fb53b13021c5",
                "5c099772d7adcee7"
            ]
        ]
    },
    {
        "id": "faefce3eab5d8d1c",
        "type": "tab",
        "label": "Create Task"
    },
    {
        "id": "e7964c1f3ce55417",
        "type": "change",
        "z": "faefce3eab5d8d1c",
        "name": "SetNotifMsg",
        "rules": [
            {
                "t": "set",
                "p": "notif_message",
                "pt": "msg",
                "to": "You have successfully created a task.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 930,
        "y": 100,
        "wires": [
            [
                "d4c20f99ccbbe957"
            ]
        ]
    },
    {
        "id": "4e64bea11ed217b9",
        "type": "subflow:234349e975e02b24",
        "z": "faefce3eab5d8d1c",
        "name": "",
        "x": 730,
        "y": 100,
        "wires": [
            [
                "74a8d43f99174df6",
                "e7964c1f3ce55417"
            ]
        ]
    },
    {
        "id": "bc4b047e8d3a5fff",
        "type": "switch",
        "z": "faefce3eab5d8d1c",
        "name": "NewTaskHeader",
        "property": "msg.req.body.task_header_id != \"\" and \tmsg.req.body.task_detail_id = \"\" and \tmsg.req.body.user_id != \"\"",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 520,
        "y": 140,
        "wires": [
            [
                "4e64bea11ed217b9"
            ],
            [
                "76c925b42a8a32af"
            ]
        ]
    },
    {
        "id": "2ab94d09511c7cfb",
        "type": "http in",
        "z": "faefce3eab5d8d1c",
        "name": "CreateTaskReq",
        "url": "/task-create",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 140,
        "wires": [
            [
                "7afe5fa3724375b4"
            ]
        ]
    },
    {
        "id": "d4c20f99ccbbe957",
        "type": "change",
        "z": "faefce3eab5d8d1c",
        "name": "SetPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t    \"sender_id\": \"USER01\",\t    \"recipient_type\": \"USER\",\t    \"recipient_id\": msg.req.body.user_id,\t    \"message\": msg.notif_message,\t    \"url\": \"/pending-task\",\t    \"content_type\": \"TASK\",\t    \"content_id\": msg.req.body.task_header_id\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1130,
        "y": 100,
        "wires": [
            [
                "d7434f8f6c831fec",
                "4afd8df31e86ab6c",
                "a5b30958e48ebfe0"
            ]
        ]
    },
    {
        "id": "d7434f8f6c831fec",
        "type": "http request",
        "z": "faefce3eab5d8d1c",
        "name": "CallSendWSNotif",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://nodered.documgt.com/send-notif-ws",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1350,
        "y": 60,
        "wires": [
            [
                "a5b30958e48ebfe0"
            ]
        ]
    },
    {
        "id": "4afd8df31e86ab6c",
        "type": "http request",
        "z": "faefce3eab5d8d1c",
        "name": "CallSendMailNotif",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://nodered.documgt.com/send-notif-email",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 1350,
        "y": 140,
        "wires": [
            [
                "a5b30958e48ebfe0"
            ]
        ]
    },
    {
        "id": "a5b30958e48ebfe0",
        "type": "debug",
        "z": "faefce3eab5d8d1c",
        "name": "debugNotifPayload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1590,
        "y": 100,
        "wires": []
    },
    {
        "id": "6b41ee9f21f86c61",
        "type": "debug",
        "z": "faefce3eab5d8d1c",
        "name": "debugRequest",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 100,
        "wires": []
    },
    {
        "id": "74a8d43f99174df6",
        "type": "http response",
        "z": "faefce3eab5d8d1c",
        "name": "CreateTaskResp",
        "statusCode": "200",
        "headers": {},
        "x": 950,
        "y": 60,
        "wires": []
    },
    {
        "id": "76c925b42a8a32af",
        "type": "change",
        "z": "faefce3eab5d8d1c",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task IDs and User ID cannot be empty\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 720,
        "y": 180,
        "wires": [
            [
                "9cc4de0fc664ddc5"
            ]
        ]
    },
    {
        "id": "9cc4de0fc664ddc5",
        "type": "http response",
        "z": "faefce3eab5d8d1c",
        "name": "ErrorResp",
        "statusCode": "400",
        "headers": {},
        "x": 930,
        "y": 180,
        "wires": []
    },
    {
        "id": "7afe5fa3724375b4",
        "type": "change",
        "z": "faefce3eab5d8d1c",
        "name": "SetAction",
        "rules": [
            {
                "t": "set",
                "p": "req.body.action",
                "pt": "msg",
                "to": "CREATE",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 320,
        "y": 140,
        "wires": [
            [
                "bc4b047e8d3a5fff",
                "6b41ee9f21f86c61"
            ]
        ]
    },
    {
        "id": "c948c2bfe98f72c1",
        "type": "tab",
        "label": "Reject Review"
    },
    {
        "id": "b54991d714bda684",
        "type": "http in",
        "z": "c948c2bfe98f72c1",
        "name": "RejectReq",
        "url": "/review-reject",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 120,
        "wires": [
            [
                "23017217d3352766"
            ]
        ]
    },
    {
        "id": "e068f0f9631b421c",
        "type": "switch",
        "z": "c948c2bfe98f72c1",
        "name": "RejectTaskDetail",
        "property": "msg.req.body.task_header_id != \"\" and \tmsg.req.body.task_detail_id != \"\" and \tmsg.req.body.action = \"REJECT\" and\tmsg.req.body.user_id != \"\"",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 120,
        "wires": [
            [
                "2a34f4bd7d438b4a"
            ],
            [
                "76c925b42a8a32af"
            ]
        ]
    },
    {
        "id": "2a34f4bd7d438b4a",
        "type": "subflow:386204d4507e3dd9",
        "z": "c948c2bfe98f72c1",
        "name": "",
        "x": 710,
        "y": 80,
        "wires": [
            [
                "e7d863b2fd954514"
            ]
        ]
    },
    {
        "id": "e7d863b2fd954514",
        "type": "http response",
        "z": "c948c2bfe98f72c1",
        "name": "RejectResp",
        "statusCode": "200",
        "headers": {},
        "x": 910,
        "y": 80,
        "wires": []
    },
    {
        "id": "de8913352c4d14b2",
        "type": "debug",
        "z": "c948c2bfe98f72c1",
        "name": "debugRequest",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 80,
        "wires": []
    },
    {
        "id": "23017217d3352766",
        "type": "change",
        "z": "c948c2bfe98f72c1",
        "name": "SetAction",
        "rules": [
            {
                "t": "set",
                "p": "req.body.action",
                "pt": "msg",
                "to": "REJECT",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 280,
        "y": 120,
        "wires": [
            [
                "e068f0f9631b421c",
                "de8913352c4d14b2"
            ]
        ]
    },
    {
        "id": "76c925b42a8a32af",
        "type": "change",
        "z": "c948c2bfe98f72c1",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task IDs and User ID cannot be empty\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 160,
        "wires": [
            [
                "9cc4de0fc664ddc5"
            ]
        ]
    },
    {
        "id": "9cc4de0fc664ddc5",
        "type": "http response",
        "z": "c948c2bfe98f72c1",
        "name": "ErrorResp",
        "statusCode": "400",
        "headers": {},
        "x": 910,
        "y": 160,
        "wires": []
    },
    {
        "id": "b3f158b10f3d1d64",
        "type": "tab",
        "label": "Send Email Notification"
    },
    {
        "id": "064ebd0531895c0a",
        "type": "e-mail",
        "z": "b3f158b10f3d1d64",
        "server": "mail.gmx.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "",
        "dname": "SendMail",
        "x": 700,
        "y": 360,
        "wires": []
    },
    {
        "id": "3f73283a9ba90e3d",
        "type": "http in",
        "z": "b3f158b10f3d1d64",
        "name": "ReqSendNotif",
        "url": "/send-notif-email",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 100,
        "wires": [
            [
                "4dd4f9b965d94cac",
                "078eefc0840bcff6"
            ]
        ]
    },
    {
        "id": "8a120dd92e732bea",
        "type": "switch",
        "z": "b3f158b10f3d1d64",
        "name": "CheckEmail",
        "property": "payload.email",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 190,
        "y": 360,
        "wires": [
            [
                "9c436c906b9b4243"
            ]
        ]
    },
    {
        "id": "078eefc0840bcff6",
        "type": "debug",
        "z": "b3f158b10f3d1d64",
        "name": "DebugPayload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "req.body",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 280,
        "y": 60,
        "wires": []
    },
    {
        "id": "4dd4f9b965d94cac",
        "type": "switch",
        "z": "b3f158b10f3d1d64",
        "name": "CheckRecipient",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "$not($exists(msg.req.body.recipient_id)) or $not($boolean(msg.req.body.recipient_id))",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 280,
        "y": 100,
        "wires": [
            [
                "8e45471492f4d4ee"
            ],
            [
                "fe1c4d8262521c97"
            ]
        ]
    },
    {
        "id": "8e45471492f4d4ee",
        "type": "change",
        "z": "b3f158b10f3d1d64",
        "name": "SetMessage",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Recipient cannot be empty\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 490,
        "y": 60,
        "wires": [
            [
                "fc1dac382aaf926c"
            ]
        ]
    },
    {
        "id": "fc1dac382aaf926c",
        "type": "http response",
        "z": "b3f158b10f3d1d64",
        "name": "RespError",
        "statusCode": "400",
        "headers": {},
        "x": 670,
        "y": 60,
        "wires": []
    },
    {
        "id": "9c436c906b9b4243",
        "type": "change",
        "z": "b3f158b10f3d1d64",
        "name": "SetHeader",
        "rules": [
            {
                "t": "move",
                "p": "payload.email",
                "pt": "msg",
                "to": "to",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "topic",
                "pt": "msg",
                "to": "ISWITCH ECM Notification",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 370,
        "y": 360,
        "wires": [
            [
                "ba44b59994f6eb2a"
            ]
        ]
    },
    {
        "id": "aac7d6ef859b6963",
        "type": "debug",
        "z": "b3f158b10f3d1d64",
        "name": "DebugPayload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 400,
        "wires": []
    },
    {
        "id": "ba44b59994f6eb2a",
        "type": "template",
        "z": "b3f158b10f3d1d64",
        "name": "SetBody",
        "field": "payload",
        "fieldType": "msg",
        "format": "html",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\" xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:o=\"urn:schemas-microsoft-com:office:office\">\n<head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\">\n    <meta name=\"x-apple-disable-message-reformatting\">\n    <title></title>\n    <style>\n        table,\n        td,\n        div,\n        h1,\n        p {\n            font-family: Arial, sans-serif;\n        }\n\n        @media screen and (max-width: 530px) {\n            .unsub {\n                display: block;\n                padding: 8px;\n                margin-top: 14px;\n                border-radius: 6px;\n                background-color: #555555;\n                text-decoration: none !important;\n                font-weight: bold;\n            }\n\n            .col-lge {\n                max-width: 100% !important;\n            }\n        }\n\n        @media screen and (min-width: 531px) {\n            .col-sml {\n                max-width: 27% !important;\n            }\n\n            .col-lge {\n                max-width: 73% !important;\n            }\n        }\n    </style>\n</head>\n\n<body style=\"margin:0;padding:0;word-spacing:normal;background-color:#0E2A47;\">\n    <div role=\"article\" aria-roledescription=\"email\" lang=\"en\"\n        style=\"text-size-adjust:100%;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;background-color:#0E2A47;\">\n        <table role=\"presentation\" style=\"width:100%;border:none;border-spacing:0;\">\n            <tr>\n                <td align=\"center\" style=\"padding:0;\">\n                    <table role=\"presentation\"\n                        style=\"width:94%; max-width:600px; border:none; border-spacing:0;text-align:left;font-family:Arial,sans-serif;font-size:16px;line-height:22px;color:#363636;\">\n                        <tr>\n                            <td style=\"padding:40px 30px 30px 30px;text-align:center;font-size:24px;font-weight:bold;\">\n                                <a href=\"http://www.example.com/\" style=\"text-decoration:none;\">\n                                    <img src=\"https://ecm.documgt.com/assets/img/logo-docu2.png\"\n                                            width=\"165\"\n                                            alt=\"Logo\"\n                                            style=\"width:265px;max-width:80%;height:auto;border:none;text-decoration:none;color:#ffffff;\">\n                                </a>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td style=\"padding:30px; background-color:#ffffff; border-top-left-radius:10px; border-top-right-radius:10px;\">\n                                <h1 style=\"margin-top:0; margin-bottom:16px; font-size:26px; line-height:32px; font-weight:bold; letter-spacing:-0.02em;\">\n                                    You got e-mail notification!</h1>\n                                <p style=\"margin:0; text-align: justify;\">\n                                    {{{req.body.message}}}\n                                </p>\n                            </td>\n                        </tr>\n                        <tr style=\"background-color:#EAEAEA;\">\n                            <td></td>\n                        </tr>\n                        <tr>\n                            <td style=\"padding:30px; background-color:#ffffff;\">\n                                <p style=\"margin:0; text-align: center;\">\n                                    <a href=\"https://ecm.documgt.com/#{{{req.body.url}}}\"\n                                        style=\"background: #CF7F08; text-decoration: none; padding: 10px 25px; color: #ffffff; border-radius: 4px; display:inline-block;\">\n                                        <span style=\"font-weight:bold;\">\n                                                OPEN\n                                        </span>\n                                    </a>\n                                </p>\n                            </td>\n                        </tr>\n                        <tr>\n                            <td style=\"padding:20px; text-align:center; font-size:12px; background-color:#404040; color:#cccccc; border-bottom-left-radius:10px; border-bottom-right-radius:10px;\">\n                                <p style=\"margin:0; font-size:14px; line-height:20px;\">\n                                    Copyright © 2023 <br> PT Sentral Data Solusindo. All rights reserved\n                                </p>\n                            </td>\n                        </tr>\n                    </table>\n                </td>\n            </tr>\n        </table>\n    </div>\n</body>\n</html>",
        "output": "str",
        "x": 540,
        "y": 360,
        "wires": [
            [
                "064ebd0531895c0a",
                "aac7d6ef859b6963"
            ]
        ]
    },
    {
        "id": "dfbf4ae9739c8866",
        "type": "change",
        "z": "b3f158b10f3d1d64",
        "name": "SetNotifPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t    \"sender_id\": $boolean(msg.req.body.sender_id) ? msg.req.body.sender_id : null,\t    \"sender_name\": msg.sender_name,\t    \"recipient_id\": msg.payload.id,\t    \"recepient_name\": msg.payload.user_name,\t    \"message\": msg.message,\t    \"url\": msg.url,\t    \"content_type\": msg.content_type,\t    \"content_id\": msg.content_id\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1420,
        "y": 200,
        "wires": [
            [
                "80886c8b0e3126f3",
                "df2f233a74d4aa4d"
            ]
        ]
    },
    {
        "id": "df2f233a74d4aa4d",
        "type": "change",
        "z": "b3f158b10f3d1d64",
        "name": "NextRow",
        "rules": [
            {
                "t": "set",
                "p": "tick",
                "pt": "msg",
                "to": "true",
                "tot": "bool"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1600,
        "y": 160,
        "wires": [
            [
                "27fe950f8f40621b",
                "7183ae338f059799"
            ]
        ]
    },
    {
        "id": "27fe950f8f40621b",
        "type": "link out",
        "z": "b3f158b10f3d1d64",
        "name": "NextRowOut",
        "mode": "link",
        "links": [
            "189b15207429aaaa"
        ],
        "x": 1715,
        "y": 120,
        "wires": []
    },
    {
        "id": "7183ae338f059799",
        "type": "join",
        "z": "b3f158b10f3d1d64",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": "false",
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "x": 1750,
        "y": 160,
        "wires": [
            [
                "0dc59807b62d1fe7"
            ]
        ]
    },
    {
        "id": "fc0676a14974817c",
        "type": "switch",
        "z": "b3f158b10f3d1d64",
        "name": "CheckPayload",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 1220,
        "y": 180,
        "wires": [
            [
                "df2f233a74d4aa4d"
            ],
            [
                "dfbf4ae9739c8866"
            ]
        ]
    },
    {
        "id": "40076c089c6f3451",
        "type": "postgresql",
        "z": "b3f158b10f3d1d64",
        "name": "GetAllUserFromGroup",
        "query": "SELECT u.id, u.email, u.user_name\nFROM users\nWHERE user_group_id = '{{ msg.req.body.recepient_id }}'",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 1000,
        "y": 180,
        "wires": [
            [
                "fc0676a14974817c"
            ]
        ]
    },
    {
        "id": "6deefb4e6ab2f5d0",
        "type": "switch",
        "z": "b3f158b10f3d1d64",
        "name": "CheckRecipientType",
        "property": "req.body.recipient_type",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "GROUP",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 740,
        "y": 220,
        "wires": [
            [
                "40076c089c6f3451"
            ],
            [
                "bf10f7ed413d8a1b"
            ]
        ]
    },
    {
        "id": "189b15207429aaaa",
        "type": "link in",
        "z": "b3f158b10f3d1d64",
        "name": "NextRowIn",
        "links": [
            "27fe950f8f40621b"
        ],
        "x": 855,
        "y": 160,
        "wires": [
            [
                "40076c089c6f3451"
            ]
        ]
    },
    {
        "id": "dd0d5a5c71d234f0",
        "type": "link in",
        "z": "b3f158b10f3d1d64",
        "name": "SendMailIn",
        "links": [
            "80886c8b0e3126f3",
            "2551fe35f0dfbf2c"
        ],
        "x": 65,
        "y": 360,
        "wires": [
            [
                "8a120dd92e732bea"
            ]
        ]
    },
    {
        "id": "80886c8b0e3126f3",
        "type": "link out",
        "z": "b3f158b10f3d1d64",
        "name": "SendMailOut",
        "mode": "link",
        "links": [
            "dd0d5a5c71d234f0"
        ],
        "x": 1555,
        "y": 200,
        "wires": []
    },
    {
        "id": "0dc59807b62d1fe7",
        "type": "http response",
        "z": "b3f158b10f3d1d64",
        "name": "RespSuccess",
        "statusCode": "200",
        "headers": {},
        "x": 1960,
        "y": 260,
        "wires": []
    },
    {
        "id": "fe1c4d8262521c97",
        "type": "postgresql",
        "z": "b3f158b10f3d1d64",
        "name": "GetSenderName",
        "query": "SELECT u.user_name\nFROM users u \nWHERE u.id = '{{ msg.notif.sender_id }}'",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 510,
        "y": 140,
        "wires": [
            [
                "009ce9ce1743206b",
                "1add072a87978176"
            ]
        ]
    },
    {
        "id": "009ce9ce1743206b",
        "type": "switch",
        "z": "b3f158b10f3d1d64",
        "name": "CheckPayload",
        "property": "payload.user_name",
        "propertyType": "msg",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 720,
        "y": 140,
        "wires": [
            [],
            [
                "a676962449cde134"
            ]
        ]
    },
    {
        "id": "1add072a87978176",
        "type": "debug",
        "z": "b3f158b10f3d1d64",
        "name": "debugUser",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 100,
        "wires": []
    },
    {
        "id": "a676962449cde134",
        "type": "change",
        "z": "b3f158b10f3d1d64",
        "name": "SetSenderName",
        "rules": [
            {
                "t": "set",
                "p": "req.body.sender_name",
                "pt": "msg",
                "to": "payload.user_name",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 510,
        "y": 220,
        "wires": [
            [
                "f07a2d4569a1f7ce",
                "6deefb4e6ab2f5d0"
            ]
        ]
    },
    {
        "id": "f07a2d4569a1f7ce",
        "type": "debug",
        "z": "b3f158b10f3d1d64",
        "name": "debugNotif",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "notif",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 260,
        "wires": []
    },
    {
        "id": "bf10f7ed413d8a1b",
        "type": "postgresql",
        "z": "b3f158b10f3d1d64",
        "name": "GetRecepientMail",
        "query": "SELECT u.email, u.user_name\nFROM users u \nWHERE u.id = '{{ msg.req.body.recepient_id }}'",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 990,
        "y": 260,
        "wires": [
            [
                "0dc59807b62d1fe7",
                "2551fe35f0dfbf2c"
            ]
        ]
    },
    {
        "id": "2551fe35f0dfbf2c",
        "type": "link out",
        "z": "b3f158b10f3d1d64",
        "name": "SendMailOut",
        "mode": "link",
        "links": [
            "dd0d5a5c71d234f0"
        ],
        "x": 1135,
        "y": 300,
        "wires": []
    },
    {
        "id": "9040490730501f32",
        "type": "tab",
        "label": "Approval Flow"
    },
    {
        "id": "c61c48241f6f26f4",
        "type": "http in",
        "z": "9040490730501f32",
        "name": "RunTask",
        "url": "/task-approval",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 80,
        "y": 240,
        "wires": [
            [
                "b8feda3deb02d5a0",
                "bb23f9d48895f5ad",
                "5ef5b83ef4b20bf4",
                "4719e1b5f4f04490",
                "5d581f4db7eb3b04",
                "2103f334250af219",
                "abc3cbf9a4b31dd8",
                "b52be3e9a635b2af",
                "b3f66db670e3c35a",
                "c70162eadfaa6668"
            ]
        ]
    },
    {
        "id": "44c4cbb2b896f522",
        "type": "http response",
        "z": "9040490730501f32",
        "name": "RunTaskResp",
        "statusCode": "200",
        "headers": {},
        "x": 820,
        "y": 320,
        "wires": []
    },
    {
        "id": "b3f66db670e3c35a",
        "type": "debug",
        "z": "9040490730501f32",
        "name": "debugRequest",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 300,
        "y": 40,
        "wires": []
    },
    {
        "id": "eb3d86f441fccc38",
        "type": "change",
        "z": "9040490730501f32",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task Header ID is invalid\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 120,
        "wires": [
            [
                "4ecff11dc3430990"
            ]
        ]
    },
    {
        "id": "4ecff11dc3430990",
        "type": "http response",
        "z": "9040490730501f32",
        "name": "ErrorResp",
        "statusCode": "400",
        "headers": {},
        "x": 1050,
        "y": 160,
        "wires": []
    },
    {
        "id": "d952d2fe810d4eb6",
        "type": "change",
        "z": "9040490730501f32",
        "d": true,
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task Header or User Id cannot be empty\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 160,
        "wires": [
            [
                "4ecff11dc3430990"
            ]
        ]
    },
    {
        "id": "b8feda3deb02d5a0",
        "type": "switch",
        "z": "9040490730501f32",
        "name": "TestDBConn",
        "property": "msg.req.body.task_header_id != \"\" and \tmsg.req.body.task_detail_id = \"\" and\tmsg.req.body.action = \"TEST\"",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 290,
        "y": 100,
        "wires": [
            [
                "10202c87267e17aa"
            ]
        ]
    },
    {
        "id": "bb23f9d48895f5ad",
        "type": "switch",
        "z": "9040490730501f32",
        "d": true,
        "name": "HeaderAndUserEmpty",
        "property": "msg.req.body.user_id = \"\"",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 1,
        "x": 320,
        "y": 160,
        "wires": [
            [
                "d952d2fe810d4eb6"
            ]
        ]
    },
    {
        "id": "5ef5b83ef4b20bf4",
        "type": "switch",
        "z": "9040490730501f32",
        "name": "NewTaskHeader",
        "property": "msg.req.body.task_header_id != \"\" and \tmsg.req.body.task_detail_id = \"\" and \tmsg.req.body.action = \"CREATE\" and\tmsg.req.body.user_id != \"\"",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 300,
        "y": 200,
        "wires": [
            [
                "d9686234bdae39b0"
            ]
        ]
    },
    {
        "id": "4719e1b5f4f04490",
        "type": "switch",
        "z": "9040490730501f32",
        "name": "ApproveTaskDetail",
        "property": "msg.req.body.task_header_id != \"\" and \tmsg.req.body.task_detail_id != \"\" and \tmsg.req.body.action = \"APPROVE\" and\tmsg.req.body.user_id != \"\"",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 360,
        "wires": [
            [
                "bde2a2fa90db8916"
            ]
        ]
    },
    {
        "id": "5d581f4db7eb3b04",
        "type": "switch",
        "z": "9040490730501f32",
        "name": "CancelTaskHeader",
        "property": "msg.req.body.task_header_id != \"\" and \tmsg.req.body.task_detail_id = \"\" and \tmsg.req.body.action = \"CANCEL\" and\tmsg.req.body.user_id != \"\"",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 240,
        "wires": [
            [
                "6046efe4dbd8c1c6"
            ]
        ]
    },
    {
        "id": "d9686234bdae39b0",
        "type": "subflow:234349e975e02b24",
        "z": "9040490730501f32",
        "name": "",
        "x": 530,
        "y": 200,
        "wires": [
            [
                "44c4cbb2b896f522",
                "9d3076ef6f8e3459"
            ]
        ]
    },
    {
        "id": "6046efe4dbd8c1c6",
        "type": "subflow:6da56882aa07c67e",
        "z": "9040490730501f32",
        "name": "",
        "x": 530,
        "y": 240,
        "wires": [
            [
                "44c4cbb2b896f522",
                "fc232f7185be0e51"
            ]
        ]
    },
    {
        "id": "2103f334250af219",
        "type": "switch",
        "z": "9040490730501f32",
        "name": "HandleTaskDetail",
        "property": "msg.req.body.task_header_id != \"\" and \tmsg.req.body.task_detail_id != \"\" and \tmsg.req.body.action = \"HANDLE\" and\tmsg.req.body.user_id != \"\"",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 280,
        "wires": [
            [
                "4572be339be88d8f"
            ]
        ]
    },
    {
        "id": "abc3cbf9a4b31dd8",
        "type": "switch",
        "z": "9040490730501f32",
        "name": "RejectTaskDetail",
        "property": "msg.req.body.task_header_id != \"\" and \tmsg.req.body.task_detail_id != \"\" and \tmsg.req.body.action = \"REJECT\" and\tmsg.req.body.user_id != \"\"",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 400,
        "wires": [
            [
                "bde2a2fa90db8916"
            ]
        ]
    },
    {
        "id": "b52be3e9a635b2af",
        "type": "switch",
        "z": "9040490730501f32",
        "name": "ReleaseTaskDetail",
        "property": "msg.req.body.task_header_id != \"\" and \tmsg.req.body.task_detail_id != \"\" and \tmsg.req.body.action = \"RELEASE\" and\tmsg.req.body.user_id != \"\"",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 320,
        "wires": [
            [
                "17339d6b2763e5cb"
            ]
        ]
    },
    {
        "id": "bde2a2fa90db8916",
        "type": "subflow:386204d4507e3dd9",
        "z": "9040490730501f32",
        "name": "",
        "x": 530,
        "y": 400,
        "wires": [
            [
                "44c4cbb2b896f522"
            ]
        ]
    },
    {
        "id": "4572be339be88d8f",
        "type": "subflow:6b8ad90223d790e1",
        "z": "9040490730501f32",
        "name": "",
        "x": 530,
        "y": 280,
        "wires": [
            [
                "44c4cbb2b896f522"
            ]
        ]
    },
    {
        "id": "17339d6b2763e5cb",
        "type": "subflow:2fe6838fdefb8310",
        "z": "9040490730501f32",
        "name": "",
        "x": 530,
        "y": 320,
        "wires": [
            [
                "44c4cbb2b896f522"
            ]
        ]
    },
    {
        "id": "10202c87267e17aa",
        "type": "postgresql",
        "z": "9040490730501f32",
        "name": "CheckTaskHeader",
        "query": "SELECT * FROM task_header\nWHERE id = '{{ msg.req.body.task_header_id }}';",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 490,
        "y": 100,
        "wires": [
            [
                "cddec1e0cf81c240",
                "f86e3b18be652232"
            ]
        ]
    },
    {
        "id": "cddec1e0cf81c240",
        "type": "switch",
        "z": "9040490730501f32",
        "name": "IsExist?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 680,
        "y": 100,
        "wires": [
            [
                "19f8567e495f8e12"
            ],
            [
                "eb3d86f441fccc38"
            ]
        ]
    },
    {
        "id": "19f8567e495f8e12",
        "type": "change",
        "z": "9040490730501f32",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task Header ID is valid\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 80,
        "wires": [
            [
                "ecffaa2514b9fe61"
            ]
        ]
    },
    {
        "id": "ecffaa2514b9fe61",
        "type": "http response",
        "z": "9040490730501f32",
        "name": "SuccessResp",
        "statusCode": "200",
        "headers": {},
        "x": 1060,
        "y": 80,
        "wires": []
    },
    {
        "id": "f86e3b18be652232",
        "type": "debug",
        "z": "9040490730501f32",
        "name": "debugDBConn",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 40,
        "wires": []
    },
    {
        "id": "c70162eadfaa6668",
        "type": "switch",
        "z": "9040490730501f32",
        "name": "ReviseTaskDetail",
        "property": "msg.req.body.task_header_id != \"\" and\tmsg.req.body.task_detail_id != \"\" and\tmsg.req.body.action = \"REVISE\" and\tmsg.req.body.user_id != \"\"",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 440,
        "wires": [
            [
                "bde2a2fa90db8916"
            ]
        ]
    },
    {
        "id": "17161c02dd279623",
        "type": "change",
        "z": "9040490730501f32",
        "name": "SetPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\t    \"sender_id\": \"USER01\",\t    \"recipient_type\": \"USER\",\t    \"recipient_id\": msg.req.body.user_id,\t    \"message\": msg.notif_message,\t    \"url\": \"/pending-task\",\t    \"content_type\": \"TASK\",\t    \"content_id\": msg.req.body.task_header_id\t}",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 250,
        "y": 580,
        "wires": [
            [
                "9df51f6e2f340186",
                "fc929e667ba03e97",
                "fad29f9a12098147"
            ]
        ]
    },
    {
        "id": "9df51f6e2f340186",
        "type": "http request",
        "z": "9040490730501f32",
        "name": "CallSendWSNotif",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://nodered.documgt.com/send-notif-ws",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 540,
        "wires": [
            [
                "fad29f9a12098147"
            ]
        ]
    },
    {
        "id": "fad29f9a12098147",
        "type": "debug",
        "z": "9040490730501f32",
        "name": "debugNotifPayload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 580,
        "wires": []
    },
    {
        "id": "3c4396423880bdb2",
        "type": "link in",
        "z": "9040490730501f32",
        "name": "NotifIn",
        "links": [
            "35e02df39f3c05f8"
        ],
        "x": 125,
        "y": 580,
        "wires": [
            [
                "17161c02dd279623"
            ]
        ]
    },
    {
        "id": "9d3076ef6f8e3459",
        "type": "change",
        "z": "9040490730501f32",
        "name": "SetNotifMsg",
        "rules": [
            {
                "t": "set",
                "p": "notif_message",
                "pt": "msg",
                "to": "You have successfully created a task.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 200,
        "wires": [
            [
                "35e02df39f3c05f8"
            ]
        ]
    },
    {
        "id": "35e02df39f3c05f8",
        "type": "link out",
        "z": "9040490730501f32",
        "name": "NotifOut",
        "mode": "link",
        "links": [
            "3c4396423880bdb2"
        ],
        "x": 935,
        "y": 220,
        "wires": []
    },
    {
        "id": "fc232f7185be0e51",
        "type": "change",
        "z": "9040490730501f32",
        "name": "SetNotifMsg",
        "rules": [
            {
                "t": "set",
                "p": "notif_message",
                "pt": "msg",
                "to": "You have successfully canceled a task.",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 810,
        "y": 240,
        "wires": [
            [
                "35e02df39f3c05f8"
            ]
        ]
    },
    {
        "id": "fc929e667ba03e97",
        "type": "http request",
        "z": "9040490730501f32",
        "name": "CallSendMailNotif",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://nodered.documgt.com/send-notif-email",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 470,
        "y": 620,
        "wires": [
            [
                "fad29f9a12098147"
            ]
        ]
    },
    {
        "id": "9803650175fc92f1",
        "type": "tab",
        "label": "Set User Notification Session"
    },
    {
        "id": "54717377428a3921",
        "type": "websocket in",
        "z": "9803650175fc92f1",
        "name": "ListenWs",
        "server": "fc9d711d29453f24",
        "client": "",
        "x": 100,
        "y": 60,
        "wires": [
            [
                "a25b42ad561dba58"
            ]
        ]
    },
    {
        "id": "205c319c079003b1",
        "type": "debug",
        "z": "9803650175fc92f1",
        "name": "DebugWs",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 640,
        "y": 60,
        "wires": []
    },
    {
        "id": "f818adaca34bc548",
        "type": "redis-command",
        "z": "9803650175fc92f1",
        "server": "a0efbb89.5e42d8",
        "command": "SET",
        "name": "SetUserSession",
        "topic": "",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 460,
        "y": 60,
        "wires": [
            [
                "205c319c079003b1"
            ]
        ]
    },
    {
        "id": "a25b42ad561dba58",
        "type": "change",
        "z": "9803650175fc92f1",
        "name": "SetPayload",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "[msg.payload, msg._session.id]",
                "tot": "jsonata"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 270,
        "y": 60,
        "wires": [
            [
                "f818adaca34bc548"
            ]
        ]
    },
    {
        "id": "e3b32f3e0d52e48d",
        "type": "tab",
        "label": "Read Notification"
    },
    {
        "id": "ac6f7323312e9c70",
        "type": "http in",
        "z": "e3b32f3e0d52e48d",
        "name": "PutReadNotif",
        "url": "/read-notif",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 60,
        "wires": [
            [
                "3ac17f8025fdd34c"
            ]
        ]
    },
    {
        "id": "3ac17f8025fdd34c",
        "type": "postgresql",
        "z": "e3b32f3e0d52e48d",
        "name": "UpdateReadNotif",
        "query": "UPDATE public.notification\nSET is_read=TRUE, \nread_on=CURRENT_TIMESTAMP,\nupdated_at=CURRENT_TIMESTAMP, \nupdated_by='{{ msg.req.body.user_id }}'\nWHERE id='{{ msg.req.body.notification_id }}';",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 330,
        "y": 60,
        "wires": [
            [
                "437de9e8d66a9f92"
            ]
        ]
    },
    {
        "id": "437de9e8d66a9f92",
        "type": "http response",
        "z": "e3b32f3e0d52e48d",
        "name": "RespReadNotif",
        "statusCode": "200",
        "headers": {},
        "x": 540,
        "y": 60,
        "wires": []
    },
    {
        "id": "69437534c62830d0",
        "type": "tab",
        "label": "tes notif"
    },
    {
        "id": "82c88d4ef5f72c8d",
        "type": "http in",
        "z": "69437534c62830d0",
        "name": "",
        "url": "/tes-notif",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 560,
        "wires": [
            [
                "b3c01cb4d0f012ba",
                "08af68c5d604ba70"
            ]
        ]
    },
    {
        "id": "b3c01cb4d0f012ba",
        "type": "http response",
        "z": "69437534c62830d0",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 350,
        "y": 600,
        "wires": []
    },
    {
        "id": "08af68c5d604ba70",
        "type": "websocket out",
        "z": "69437534c62830d0",
        "name": "",
        "server": "e636cb44293ad1e2",
        "client": "",
        "x": 490,
        "y": 500,
        "wires": []
    },
    {
        "id": "d4912f63b48bf155",
        "type": "tab",
        "label": "tes 4"
    },
    {
        "id": "b123778da9d445c9",
        "type": "function",
        "z": "d4912f63b48bf155",
        "name": "function 1",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "ca5714ea31d625dd",
        "type": "switch",
        "z": "d4912f63b48bf155",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 170,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "ebb35df70348944f",
        "type": "function",
        "z": "d4912f63b48bf155",
        "name": "function 2",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "95a4653dd7574e46",
        "type": "http in",
        "z": "d4912f63b48bf155",
        "name": "",
        "url": "/tes",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 120,
        "wires": [
            [
                "5ecfc297116e648a"
            ]
        ]
    },
    {
        "id": "5ecfc297116e648a",
        "type": "http response",
        "z": "d4912f63b48bf155",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 370,
        "y": 200,
        "wires": []
    },
    {
        "id": "35e4c9a52f93df01",
        "type": "tab",
        "label": "tes 3"
    },
    {
        "id": "bae74291b995c044",
        "type": "inject",
        "z": "35e4c9a52f93df01",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "b88c3f5286974aff",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "300ceba77b642bf8",
        "type": "inject",
        "z": "b88c3f5286974aff",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "type": "tab",
        "label": "Approval Workflow v2",
        "id": "932a6582da90353d"
    },
    {
        "type": "tab",
        "label": "Notification Flow",
        "id": "0117b2f5d24cdb1e"
    },
    {
        "id": "6a3d932295503a8a",
        "type": "http in",
        "z": "0117b2f5d24cdb1e",
        "name": "PostSendNotif",
        "url": "/send-notif",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 60,
        "wires": [
            [
                "5757e3dcd44c40c0",
                "e0825fda037ecb63"
            ]
        ]
    },
    {
        "id": "a3d35298b0e2b5a9",
        "type": "http response",
        "z": "0117b2f5d24cdb1e",
        "name": "RespError",
        "statusCode": "400",
        "headers": {},
        "x": 530,
        "y": 120,
        "wires": []
    },
    {
        "id": "5757e3dcd44c40c0",
        "type": "switch",
        "z": "0117b2f5d24cdb1e",
        "name": "CheckRecipient",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "$not($exists(msg.payload.recipient_id)) or $not($boolean(msg.payload.recipient_id))",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 140,
        "y": 180,
        "wires": [
            [
                "e12c5ee62b06f527"
            ],
            [
                "0901db51fcbcf484",
                "1f3870d21159f835"
            ]
        ]
    },
    {
        "id": "e12c5ee62b06f527",
        "type": "change",
        "z": "0117b2f5d24cdb1e",
        "name": "SetMessage",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Recipient cannot be empty\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 120,
        "wires": [
            [
                "a3d35298b0e2b5a9"
            ]
        ]
    },
    {
        "id": "b1d715d4436f86e2",
        "type": "http response",
        "z": "0117b2f5d24cdb1e",
        "name": "RespSuccess",
        "statusCode": "200",
        "headers": {},
        "x": 720,
        "y": 200,
        "wires": []
    },
    {
        "id": "0e9128aaf99767b5",
        "type": "postgresql",
        "z": "0117b2f5d24cdb1e",
        "name": "InsertToDB",
        "query": "INSERT INTO public.notification\n(id, created_by, updated_by, \nsender_id, url, recipient_id, \ncontent_id, content_type, message)\nVALUES('{{ msg.uuid }}', '{{ msg.req.body.sender_id }}', '{{ msg.req.body.sender_id }}',\n'{{ msg.req.body.sender_id }}', '{{ msg.req.body.url }}', '{{ msg.req.body.recipient_id }}',\n'{{ msg.req.body.content_id }}', '{{ msg.req.body.content_type }}', '{{ msg.req.body.message }}');",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 530,
        "y": 200,
        "wires": [
            [
                "b1d715d4436f86e2"
            ]
        ]
    },
    {
        "id": "0901db51fcbcf484",
        "type": "subflow:7b1a86285ed2955f",
        "z": "0117b2f5d24cdb1e",
        "name": "",
        "x": 350,
        "y": 200,
        "wires": [
            [
                "0e9128aaf99767b5"
            ]
        ],
        "subflow": "7b1a86285ed2955f"
    },
    {
        "id": "e0825fda037ecb63",
        "type": "debug",
        "z": "0117b2f5d24cdb1e",
        "name": "DebugPayload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 60,
        "wires": []
    },
    {
        "id": "c78c8e1d2eac1bd4",
        "type": "sse-plus",
        "z": "0117b2f5d24cdb1e",
        "name": "SendNotification",
        "path": "/sse-notif",
        "room": "",
        "heartbeat": "20000",
        "retry": 10000,
        "retrySet": true,
        "accesscontrol": "*",
        "accessControlSet": true,
        "x": 520,
        "y": 260,
        "wires": []
    },
    {
        "id": "1f3870d21159f835",
        "type": "change",
        "z": "0117b2f5d24cdb1e",
        "name": "SetRoom",
        "rules": [
            {
                "t": "set",
                "p": "room",
                "pt": "msg",
                "to": "payload.recipient_id",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 340,
        "y": 260,
        "wires": [
            [
                "c78c8e1d2eac1bd4"
            ]
        ]
    },
    {
        "type": "tab",
        "label": "Testing Flow",
        "id": "9f604653cd9dc399"
    },
    {
        "type": "tab",
        "label": "Coba untuk dihapus",
        "id": "2672b39af48295e4"
    },
    {
        "type": "tab",
        "label": "Auto Approval Flow",
        "id": "25dcb3219a191b1f"
    },
    {
        "id": "a680783f58c3ecf6",
        "type": "http in",
        "z": "25dcb3219a191b1f",
        "name": "RunTask",
        "url": "/task-autoapprove",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 80,
        "y": 280,
        "wires": [
            [
                "2616aab69797ee91",
                "5259817d0670428f",
                "4389366c8b11c59c"
            ]
        ]
    },
    {
        "id": "6abbfebb448c16c3",
        "type": "http response",
        "z": "25dcb3219a191b1f",
        "name": "RunTaskResp",
        "statusCode": "200",
        "headers": {},
        "x": 800,
        "y": 240,
        "wires": []
    },
    {
        "id": "625d7b75ac4a7c59",
        "type": "debug",
        "z": "25dcb3219a191b1f",
        "name": "DebugTaskHeader",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 810,
        "y": 300,
        "wires": []
    },
    {
        "id": "87b61e3d6241ab73",
        "type": "change",
        "z": "25dcb3219a191b1f",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task Header ID is invalid\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 120,
        "wires": [
            [
                "7f69e17a24ccef12"
            ]
        ]
    },
    {
        "id": "7f69e17a24ccef12",
        "type": "http response",
        "z": "25dcb3219a191b1f",
        "name": "ErrorResp",
        "statusCode": "400",
        "headers": {},
        "x": 1050,
        "y": 160,
        "wires": []
    },
    {
        "id": "892f8dfd7497c4af",
        "type": "change",
        "z": "25dcb3219a191b1f",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task Header ID cannot be empty\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 520,
        "y": 160,
        "wires": [
            [
                "7f69e17a24ccef12"
            ]
        ]
    },
    {
        "id": "2616aab69797ee91",
        "type": "switch",
        "z": "25dcb3219a191b1f",
        "name": "TestDBConn",
        "property": "msg.req.body.task_header_id != \"\" and \tmsg.req.body.task_detail_id = \"\" and\tmsg.req.body.action = \"\" and\tmsg.req.body.user_id = \"\"",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 290,
        "y": 100,
        "wires": [
            [
                "3eaf1bc1cbe9990b"
            ]
        ]
    },
    {
        "id": "5259817d0670428f",
        "type": "switch",
        "z": "25dcb3219a191b1f",
        "name": "HeaderTaskEmpty",
        "property": "msg.req.body.task_header_id = \"\" and \tmsg.req.body.task_detail_id != \"\"",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 310,
        "y": 160,
        "wires": [
            [
                "892f8dfd7497c4af"
            ]
        ]
    },
    {
        "id": "4389366c8b11c59c",
        "type": "switch",
        "z": "25dcb3219a191b1f",
        "name": "NewTaskHeader",
        "property": "msg.req.body.task_header_id != \"\" and \tmsg.req.body.task_detail_id = \"\" and \tmsg.req.body.action = \"CREATE\"",
        "propertyType": "jsonata",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 300,
        "y": 240,
        "wires": [
            [
                "e54af5b3268cbabd"
            ]
        ]
    },
    {
        "id": "3eaf1bc1cbe9990b",
        "type": "postgresql",
        "z": "25dcb3219a191b1f",
        "name": "CheckTaskHeader",
        "query": "SELECT * FROM task_header\nWHERE id = '{{ msg.req.body.task_header_id }}';",
        "postgreSQLConfig": "37f4d968adc13212",
        "split": true,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 490,
        "y": 100,
        "wires": [
            [
                "252f267118dffc8d",
                "1788a473aa985e62"
            ]
        ]
    },
    {
        "id": "252f267118dffc8d",
        "type": "switch",
        "z": "25dcb3219a191b1f",
        "name": "IsExist?",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 680,
        "y": 100,
        "wires": [
            [
                "6ebb9ef4027811cb"
            ],
            [
                "87b61e3d6241ab73"
            ]
        ]
    },
    {
        "id": "6ebb9ef4027811cb",
        "type": "change",
        "z": "25dcb3219a191b1f",
        "name": "SetMsg",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Task Header ID is valid\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 80,
        "wires": [
            [
                "9ebd107c7352c990"
            ]
        ]
    },
    {
        "id": "9ebd107c7352c990",
        "type": "http response",
        "z": "25dcb3219a191b1f",
        "name": "SuccessResp",
        "statusCode": "200",
        "headers": {},
        "x": 1060,
        "y": 80,
        "wires": []
    },
    {
        "id": "1788a473aa985e62",
        "type": "debug",
        "z": "25dcb3219a191b1f",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 680,
        "y": 40,
        "wires": []
    },
    {
        "id": "e54af5b3268cbabd",
        "type": "subflow:832d89a1f35278cc",
        "z": "25dcb3219a191b1f",
        "name": "",
        "x": 540,
        "y": 240,
        "wires": [
            [
                "6abbfebb448c16c3",
                "625d7b75ac4a7c59"
            ]
        ],
        "subflow": "832d89a1f35278cc"
    },
    {
        "type": "tab",
        "label": "Send WS Notification",
        "id": "5e8f9e22bf490747"
    },
    {
        "id": "82c88d4ef5f72c8d",
        "type": "http in",
        "z": "5e8f9e22bf490747",
        "name": "ReqSendNotif",
        "url": "/send-notif-ws",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "078eefc0840bcff6",
                "4dd4f9b965d94cac"
            ]
        ]
    },
    {
        "id": "078eefc0840bcff6",
        "type": "debug",
        "z": "5e8f9e22bf490747",
        "name": "DebugPayload",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "req.body",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 320,
        "y": 120,
        "wires": []
    },
    {
        "id": "4dd4f9b965d94cac",
        "type": "switch",
        "z": "5e8f9e22bf490747",
        "name": "CheckRecipient",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "jsonata_exp",
                "v": "$not($exists(msg.req.body.recipient_id)) or $not($boolean(msg.req.body.recipient_id))",
                "vt": "jsonata"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 320,
        "y": 60,
        "wires": [
            [
                "8e45471492f4d4ee"
            ],
            [
                "0322acffee2a3eaa"
            ]
        ]
    },
    {
        "id": "8e45471492f4d4ee",
        "type": "change",
        "z": "5e8f9e22bf490747",
        "name": "SetMessage",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "{\"message\":\"Recipient cannot be empty\"}",
                "tot": "json"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 550,
        "y": 40,
        "wires": [
            [
                "fc1dac382aaf926c"
            ]
        ]
    },
    {
        "id": "fc1dac382aaf926c",
        "type": "http response",
        "z": "5e8f9e22bf490747",
        "name": "RespError",
        "statusCode": "400",
        "headers": {},
        "x": 750,
        "y": 40,
        "wires": []
    },
    {
        "id": "0dc59807b62d1fe7",
        "type": "http response",
        "z": "5e8f9e22bf490747",
        "name": "RespSuccess",
        "statusCode": "200",
        "headers": {},
        "x": 960,
        "y": 100,
        "wires": []
    },
    {
        "id": "0322acffee2a3eaa",
        "type": "change",
        "z": "5e8f9e22bf490747",
        "name": "SetNotif",
        "rules": [
            {
                "t": "move",
                "p": "payload",
                "pt": "msg",
                "to": "notif",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 540,
        "y": 100,
        "wires": [
            [
                "12b75d0154631d13"
            ]
        ]
    },
    {
        "id": "12b75d0154631d13",
        "type": "subflow:275009fa4a3f0b95",
        "z": "5e8f9e22bf490747",
        "name": "",
        "x": 740,
        "y": 100,
        "wires": [
            [
                "0dc59807b62d1fe7"
            ]
        ],
        "subflow": "275009fa4a3f0b95"
    },
    {
        "type": "tab",
        "label": "Release Task",
        "id": "710912c452337b1c"
    },
    {
        "type": "tab",
        "label": "TEST Task",
        "id": "1a55e4d8be6e0f61"
    },
    {
        "type": "tab",
        "label": "TEST Task",
        "id": "b86f05ebe68ae6f6"
    },
    {
        "type": "tab",
        "label": "TEST Task",
        "id": "1e039215728c2301"
    },
    {
        "type": "tab",
        "label": "coba",
        "id": "462f08c92a1defd9"
    },
    {
        "type": "tab",
        "label": "Testing",
        "id": "9cc4348eafcdc68d"
    }
]